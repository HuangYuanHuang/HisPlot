//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HanaTechHisPlot.HanaTechWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagProperty", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class TagProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ACKNOWLEDGEMENTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ALARM_FORMATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ALARM_STATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DC_MAX_TIME_INTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DC_SIGNIFICANCEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DC_SLOPEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DC_STATUSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DEVICE_TABLEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ENG_UNITSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GRAPH_MAXIMUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GRAPH_MINIMUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HIGH_HIGH_LIMITField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HIGH_LIMITField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INPUT_QUALITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INPUT_TIMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string INPUT_VALUEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LIMIT_DEADBANDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOW_LIMITField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LOW_LOW_LIMITField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MESSAGE_SWITCHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PARENT_TAGNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PLANT_AREAField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SRC_COLLECTORField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SRC_SCANSECSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SRC_TAGNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string STEPPEDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TREND_VIEW_TIMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VALUEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VALUE_FORMATField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VALUE_QUALITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VALUE_TIMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 描述Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 服务器名称Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ACKNOWLEDGEMENT {
            get {
                return this.ACKNOWLEDGEMENTField;
            }
            set {
                if ((object.ReferenceEquals(this.ACKNOWLEDGEMENTField, value) != true)) {
                    this.ACKNOWLEDGEMENTField = value;
                    this.RaisePropertyChanged("ACKNOWLEDGEMENT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ALARM_FORMAT {
            get {
                return this.ALARM_FORMATField;
            }
            set {
                if ((object.ReferenceEquals(this.ALARM_FORMATField, value) != true)) {
                    this.ALARM_FORMATField = value;
                    this.RaisePropertyChanged("ALARM_FORMAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ALARM_STATE {
            get {
                return this.ALARM_STATEField;
            }
            set {
                if ((object.ReferenceEquals(this.ALARM_STATEField, value) != true)) {
                    this.ALARM_STATEField = value;
                    this.RaisePropertyChanged("ALARM_STATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DC_MAX_TIME_INT {
            get {
                return this.DC_MAX_TIME_INTField;
            }
            set {
                if ((object.ReferenceEquals(this.DC_MAX_TIME_INTField, value) != true)) {
                    this.DC_MAX_TIME_INTField = value;
                    this.RaisePropertyChanged("DC_MAX_TIME_INT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DC_SIGNIFICANCE {
            get {
                return this.DC_SIGNIFICANCEField;
            }
            set {
                if ((object.ReferenceEquals(this.DC_SIGNIFICANCEField, value) != true)) {
                    this.DC_SIGNIFICANCEField = value;
                    this.RaisePropertyChanged("DC_SIGNIFICANCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DC_SLOPE {
            get {
                return this.DC_SLOPEField;
            }
            set {
                if ((object.ReferenceEquals(this.DC_SLOPEField, value) != true)) {
                    this.DC_SLOPEField = value;
                    this.RaisePropertyChanged("DC_SLOPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DC_STATUS {
            get {
                return this.DC_STATUSField;
            }
            set {
                if ((object.ReferenceEquals(this.DC_STATUSField, value) != true)) {
                    this.DC_STATUSField = value;
                    this.RaisePropertyChanged("DC_STATUS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DEVICE_TABLE {
            get {
                return this.DEVICE_TABLEField;
            }
            set {
                if ((object.ReferenceEquals(this.DEVICE_TABLEField, value) != true)) {
                    this.DEVICE_TABLEField = value;
                    this.RaisePropertyChanged("DEVICE_TABLE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ENG_UNITS {
            get {
                return this.ENG_UNITSField;
            }
            set {
                if ((object.ReferenceEquals(this.ENG_UNITSField, value) != true)) {
                    this.ENG_UNITSField = value;
                    this.RaisePropertyChanged("ENG_UNITS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GRAPH_MAXIMUM {
            get {
                return this.GRAPH_MAXIMUMField;
            }
            set {
                if ((object.ReferenceEquals(this.GRAPH_MAXIMUMField, value) != true)) {
                    this.GRAPH_MAXIMUMField = value;
                    this.RaisePropertyChanged("GRAPH_MAXIMUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GRAPH_MINIMUM {
            get {
                return this.GRAPH_MINIMUMField;
            }
            set {
                if ((object.ReferenceEquals(this.GRAPH_MINIMUMField, value) != true)) {
                    this.GRAPH_MINIMUMField = value;
                    this.RaisePropertyChanged("GRAPH_MINIMUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HIGH_HIGH_LIMIT {
            get {
                return this.HIGH_HIGH_LIMITField;
            }
            set {
                if ((object.ReferenceEquals(this.HIGH_HIGH_LIMITField, value) != true)) {
                    this.HIGH_HIGH_LIMITField = value;
                    this.RaisePropertyChanged("HIGH_HIGH_LIMIT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HIGH_LIMIT {
            get {
                return this.HIGH_LIMITField;
            }
            set {
                if ((object.ReferenceEquals(this.HIGH_LIMITField, value) != true)) {
                    this.HIGH_LIMITField = value;
                    this.RaisePropertyChanged("HIGH_LIMIT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INPUT_QUALITY {
            get {
                return this.INPUT_QUALITYField;
            }
            set {
                if ((object.ReferenceEquals(this.INPUT_QUALITYField, value) != true)) {
                    this.INPUT_QUALITYField = value;
                    this.RaisePropertyChanged("INPUT_QUALITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INPUT_TIME {
            get {
                return this.INPUT_TIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.INPUT_TIMEField, value) != true)) {
                    this.INPUT_TIMEField = value;
                    this.RaisePropertyChanged("INPUT_TIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string INPUT_VALUE {
            get {
                return this.INPUT_VALUEField;
            }
            set {
                if ((object.ReferenceEquals(this.INPUT_VALUEField, value) != true)) {
                    this.INPUT_VALUEField = value;
                    this.RaisePropertyChanged("INPUT_VALUE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LIMIT_DEADBAND {
            get {
                return this.LIMIT_DEADBANDField;
            }
            set {
                if ((object.ReferenceEquals(this.LIMIT_DEADBANDField, value) != true)) {
                    this.LIMIT_DEADBANDField = value;
                    this.RaisePropertyChanged("LIMIT_DEADBAND");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOW_LIMIT {
            get {
                return this.LOW_LIMITField;
            }
            set {
                if ((object.ReferenceEquals(this.LOW_LIMITField, value) != true)) {
                    this.LOW_LIMITField = value;
                    this.RaisePropertyChanged("LOW_LIMIT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LOW_LOW_LIMIT {
            get {
                return this.LOW_LOW_LIMITField;
            }
            set {
                if ((object.ReferenceEquals(this.LOW_LOW_LIMITField, value) != true)) {
                    this.LOW_LOW_LIMITField = value;
                    this.RaisePropertyChanged("LOW_LOW_LIMIT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MESSAGE_SWITCH {
            get {
                return this.MESSAGE_SWITCHField;
            }
            set {
                if ((object.ReferenceEquals(this.MESSAGE_SWITCHField, value) != true)) {
                    this.MESSAGE_SWITCHField = value;
                    this.RaisePropertyChanged("MESSAGE_SWITCH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PARENT_TAGNAME {
            get {
                return this.PARENT_TAGNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.PARENT_TAGNAMEField, value) != true)) {
                    this.PARENT_TAGNAMEField = value;
                    this.RaisePropertyChanged("PARENT_TAGNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PLANT_AREA {
            get {
                return this.PLANT_AREAField;
            }
            set {
                if ((object.ReferenceEquals(this.PLANT_AREAField, value) != true)) {
                    this.PLANT_AREAField = value;
                    this.RaisePropertyChanged("PLANT_AREA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SRC_COLLECTOR {
            get {
                return this.SRC_COLLECTORField;
            }
            set {
                if ((object.ReferenceEquals(this.SRC_COLLECTORField, value) != true)) {
                    this.SRC_COLLECTORField = value;
                    this.RaisePropertyChanged("SRC_COLLECTOR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SRC_SCANSECS {
            get {
                return this.SRC_SCANSECSField;
            }
            set {
                if ((object.ReferenceEquals(this.SRC_SCANSECSField, value) != true)) {
                    this.SRC_SCANSECSField = value;
                    this.RaisePropertyChanged("SRC_SCANSECS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SRC_TAGNAME {
            get {
                return this.SRC_TAGNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.SRC_TAGNAMEField, value) != true)) {
                    this.SRC_TAGNAMEField = value;
                    this.RaisePropertyChanged("SRC_TAGNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string STEPPED {
            get {
                return this.STEPPEDField;
            }
            set {
                if ((object.ReferenceEquals(this.STEPPEDField, value) != true)) {
                    this.STEPPEDField = value;
                    this.RaisePropertyChanged("STEPPED");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TREND_VIEW_TIME {
            get {
                return this.TREND_VIEW_TIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.TREND_VIEW_TIMEField, value) != true)) {
                    this.TREND_VIEW_TIMEField = value;
                    this.RaisePropertyChanged("TREND_VIEW_TIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VALUE {
            get {
                return this.VALUEField;
            }
            set {
                if ((object.ReferenceEquals(this.VALUEField, value) != true)) {
                    this.VALUEField = value;
                    this.RaisePropertyChanged("VALUE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VALUE_FORMAT {
            get {
                return this.VALUE_FORMATField;
            }
            set {
                if ((object.ReferenceEquals(this.VALUE_FORMATField, value) != true)) {
                    this.VALUE_FORMATField = value;
                    this.RaisePropertyChanged("VALUE_FORMAT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VALUE_QUALITY {
            get {
                return this.VALUE_QUALITYField;
            }
            set {
                if ((object.ReferenceEquals(this.VALUE_QUALITYField, value) != true)) {
                    this.VALUE_QUALITYField = value;
                    this.RaisePropertyChanged("VALUE_QUALITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VALUE_TIME {
            get {
                return this.VALUE_TIMEField;
            }
            set {
                if ((object.ReferenceEquals(this.VALUE_TIMEField, value) != true)) {
                    this.VALUE_TIMEField = value;
                    this.RaisePropertyChanged("VALUE_TIME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号名称 {
            get {
                return this.位号名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号名称Field, value) != true)) {
                    this.位号名称Field = value;
                    this.RaisePropertyChanged("位号名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 描述 {
            get {
                return this.描述Field;
            }
            set {
                if ((object.ReferenceEquals(this.描述Field, value) != true)) {
                    this.描述Field = value;
                    this.RaisePropertyChanged("描述");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 服务器名称 {
            get {
                return this.服务器名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.服务器名称Field, value) != true)) {
                    this.服务器名称Field = value;
                    this.RaisePropertyChanged("服务器名称");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataCollector", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class DataCollector : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataCollectDesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataCollectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataCollectDes {
            get {
                return this.DataCollectDesField;
            }
            set {
                if ((object.ReferenceEquals(this.DataCollectDesField, value) != true)) {
                    this.DataCollectDesField = value;
                    this.RaisePropertyChanged("DataCollectDes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataCollectName {
            get {
                return this.DataCollectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataCollectNameField, value) != true)) {
                    this.DataCollectNameField = value;
                    this.RaisePropertyChanged("DataCollectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagUnit", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class TagUnit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitDesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitDes {
            get {
                return this.UnitDesField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitDesField, value) != true)) {
                    this.UnitDesField = value;
                    this.RaisePropertyChanged("UnitDes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitName {
            get {
                return this.UnitNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitNameField, value) != true)) {
                    this.UnitNameField = value;
                    this.RaisePropertyChanged("UnitName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UnitType {
            get {
                return this.UnitTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitTypeField, value) != true)) {
                    this.UnitTypeField = value;
                    this.RaisePropertyChanged("UnitType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagList", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class TagList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号实时值Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号时间Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 单位Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 描述Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 映射Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 服务器名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 直列名Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号名称 {
            get {
                return this.位号名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号名称Field, value) != true)) {
                    this.位号名称Field = value;
                    this.RaisePropertyChanged("位号名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号实时值 {
            get {
                return this.位号实时值Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号实时值Field, value) != true)) {
                    this.位号实时值Field = value;
                    this.RaisePropertyChanged("位号实时值");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号时间 {
            get {
                return this.位号时间Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号时间Field, value) != true)) {
                    this.位号时间Field = value;
                    this.RaisePropertyChanged("位号时间");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 单位 {
            get {
                return this.单位Field;
            }
            set {
                if ((object.ReferenceEquals(this.单位Field, value) != true)) {
                    this.单位Field = value;
                    this.RaisePropertyChanged("单位");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 描述 {
            get {
                return this.描述Field;
            }
            set {
                if ((object.ReferenceEquals(this.描述Field, value) != true)) {
                    this.描述Field = value;
                    this.RaisePropertyChanged("描述");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 映射 {
            get {
                return this.映射Field;
            }
            set {
                if ((object.ReferenceEquals(this.映射Field, value) != true)) {
                    this.映射Field = value;
                    this.RaisePropertyChanged("映射");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 服务器名称 {
            get {
                return this.服务器名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.服务器名称Field, value) != true)) {
                    this.服务器名称Field = value;
                    this.RaisePropertyChanged("服务器名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 直列名 {
            get {
                return this.直列名Field;
            }
            set {
                if ((object.ReferenceEquals(this.直列名Field, value) != true)) {
                    this.直列名Field = value;
                    this.RaisePropertyChanged("直列名");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagValueList", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class TagValueList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号值Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号值时间Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 可信度Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 描述Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 服务器名称Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号值 {
            get {
                return this.位号值Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号值Field, value) != true)) {
                    this.位号值Field = value;
                    this.RaisePropertyChanged("位号值");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号值时间 {
            get {
                return this.位号值时间Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号值时间Field, value) != true)) {
                    this.位号值时间Field = value;
                    this.RaisePropertyChanged("位号值时间");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号名称 {
            get {
                return this.位号名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号名称Field, value) != true)) {
                    this.位号名称Field = value;
                    this.RaisePropertyChanged("位号名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 可信度 {
            get {
                return this.可信度Field;
            }
            set {
                if ((object.ReferenceEquals(this.可信度Field, value) != true)) {
                    this.可信度Field = value;
                    this.RaisePropertyChanged("可信度");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 描述 {
            get {
                return this.描述Field;
            }
            set {
                if ((object.ReferenceEquals(this.描述Field, value) != true)) {
                    this.描述Field = value;
                    this.RaisePropertyChanged("描述");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 服务器名称 {
            get {
                return this.服务器名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.服务器名称Field, value) != true)) {
                    this.服务器名称Field = value;
                    this.RaisePropertyChanged("服务器名称");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryParam", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class QueryParam : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 位号名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 周期Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 字段Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 开始日期Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 排序Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 结束日期Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 请求方式Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 采样方式Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 位号名称 {
            get {
                return this.位号名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.位号名称Field, value) != true)) {
                    this.位号名称Field = value;
                    this.RaisePropertyChanged("位号名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 周期 {
            get {
                return this.周期Field;
            }
            set {
                if ((this.周期Field.Equals(value) != true)) {
                    this.周期Field = value;
                    this.RaisePropertyChanged("周期");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 字段 {
            get {
                return this.字段Field;
            }
            set {
                if ((object.ReferenceEquals(this.字段Field, value) != true)) {
                    this.字段Field = value;
                    this.RaisePropertyChanged("字段");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 开始日期 {
            get {
                return this.开始日期Field;
            }
            set {
                if ((object.ReferenceEquals(this.开始日期Field, value) != true)) {
                    this.开始日期Field = value;
                    this.RaisePropertyChanged("开始日期");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 排序 {
            get {
                return this.排序Field;
            }
            set {
                if ((this.排序Field.Equals(value) != true)) {
                    this.排序Field = value;
                    this.RaisePropertyChanged("排序");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 结束日期 {
            get {
                return this.结束日期Field;
            }
            set {
                if ((object.ReferenceEquals(this.结束日期Field, value) != true)) {
                    this.结束日期Field = value;
                    this.RaisePropertyChanged("结束日期");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 请求方式 {
            get {
                return this.请求方式Field;
            }
            set {
                if ((this.请求方式Field.Equals(value) != true)) {
                    this.请求方式Field = value;
                    this.RaisePropertyChanged("请求方式");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 采样方式 {
            get {
                return this.采样方式Field;
            }
            set {
                if ((this.采样方式Field.Equals(value) != true)) {
                    this.采样方式Field = value;
                    this.RaisePropertyChanged("采样方式");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagPropertyForCache", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class TagPropertyForCache : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientItemsHandleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfidenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Input_timeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Input_valueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastAccessTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastRefreshTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SERVERNAMEField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientItemsHandle {
            get {
                return this.ClientItemsHandleField;
            }
            set {
                if ((this.ClientItemsHandleField.Equals(value) != true)) {
                    this.ClientItemsHandleField = value;
                    this.RaisePropertyChanged("ClientItemsHandle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Confidence {
            get {
                return this.ConfidenceField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfidenceField, value) != true)) {
                    this.ConfidenceField = value;
                    this.RaisePropertyChanged("Confidence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Input_time {
            get {
                return this.Input_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.Input_timeField, value) != true)) {
                    this.Input_timeField = value;
                    this.RaisePropertyChanged("Input_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Input_value {
            get {
                return this.Input_valueField;
            }
            set {
                if ((object.ReferenceEquals(this.Input_valueField, value) != true)) {
                    this.Input_valueField = value;
                    this.RaisePropertyChanged("Input_value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastAccessTime {
            get {
                return this.LastAccessTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LastAccessTimeField, value) != true)) {
                    this.LastAccessTimeField = value;
                    this.RaisePropertyChanged("LastAccessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastRefreshTime {
            get {
                return this.LastRefreshTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LastRefreshTimeField, value) != true)) {
                    this.LastRefreshTimeField = value;
                    this.RaisePropertyChanged("LastRefreshTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Map {
            get {
                return this.MapField;
            }
            set {
                if ((object.ReferenceEquals(this.MapField, value) != true)) {
                    this.MapField = value;
                    this.RaisePropertyChanged("Map");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="NameField")]
        public string NameField1 {
            get {
                return this.NameField1Field;
            }
            set {
                if ((object.ReferenceEquals(this.NameField1Field, value) != true)) {
                    this.NameField1Field = value;
                    this.RaisePropertyChanged("NameField1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SERVERNAME {
            get {
                return this.SERVERNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.SERVERNAMEField, value) != true)) {
                    this.SERVERNAMEField = value;
                    this.RaisePropertyChanged("SERVERNAME");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AsepnInterface", Namespace="http://schemas.datacontract.org/2004/07/HanaTech.WCFService.Model")]
    [System.SerializableAttribute()]
    public partial class AsepnInterface : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Bad点数Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Good点数Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 总点数Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 接口名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 接口最后更新时间Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 接口状态Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 装置IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string 装置名称Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int 装置父节点Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Bad点数 {
            get {
                return this.Bad点数Field;
            }
            set {
                if ((this.Bad点数Field.Equals(value) != true)) {
                    this.Bad点数Field = value;
                    this.RaisePropertyChanged("Bad点数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Good点数 {
            get {
                return this.Good点数Field;
            }
            set {
                if ((this.Good点数Field.Equals(value) != true)) {
                    this.Good点数Field = value;
                    this.RaisePropertyChanged("Good点数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 总点数 {
            get {
                return this.总点数Field;
            }
            set {
                if ((this.总点数Field.Equals(value) != true)) {
                    this.总点数Field = value;
                    this.RaisePropertyChanged("总点数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 接口名称 {
            get {
                return this.接口名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.接口名称Field, value) != true)) {
                    this.接口名称Field = value;
                    this.RaisePropertyChanged("接口名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 接口最后更新时间 {
            get {
                return this.接口最后更新时间Field;
            }
            set {
                if ((object.ReferenceEquals(this.接口最后更新时间Field, value) != true)) {
                    this.接口最后更新时间Field = value;
                    this.RaisePropertyChanged("接口最后更新时间");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 接口状态 {
            get {
                return this.接口状态Field;
            }
            set {
                if ((object.ReferenceEquals(this.接口状态Field, value) != true)) {
                    this.接口状态Field = value;
                    this.RaisePropertyChanged("接口状态");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 装置ID {
            get {
                return this.装置IDField;
            }
            set {
                if ((this.装置IDField.Equals(value) != true)) {
                    this.装置IDField = value;
                    this.RaisePropertyChanged("装置ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 装置名称 {
            get {
                return this.装置名称Field;
            }
            set {
                if ((object.ReferenceEquals(this.装置名称Field, value) != true)) {
                    this.装置名称Field = value;
                    this.RaisePropertyChanged("装置名称");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 装置父节点 {
            get {
                return this.装置父节点Field;
            }
            set {
                if ((this.装置父节点Field.Equals(value) != true)) {
                    this.装置父节点Field = value;
                    this.RaisePropertyChanged("装置父节点");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Http://www.hanatech.com.cn/WCFService/", ConfigurationName="HanaTechWCFService.IWCFAspen")]
    public interface IWCFAspen {
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExistsTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExistsTagResponse")]
        bool ExistsTag(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExistsTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExistsTagResponse")]
        System.IAsyncResult BeginExistsTag(string strTagName, System.AsyncCallback callback, object asyncState);
        
        bool EndExistsTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddTagResponse")]
        bool AddTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddTagResponse")]
        System.IAsyncResult BeginAddTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/UpdateTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/UpdateTagResponse")]
        bool UpdateTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/UpdateTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/UpdateTagResponse")]
        System.IAsyncResult BeginUpdateTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/DeleteTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/DeleteTagResponse")]
        bool DeleteTag(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/DeleteTag", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/DeleteTagResponse")]
        System.IAsyncResult BeginDeleteTag(string strTagName, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteTag(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValue", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueResponse")]
        bool PutTagValue(string strTagName, string strTagValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValue", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueResponse")]
        System.IAsyncResult BeginPutTagValue(string strTagName, string strTagValue, System.AsyncCallback callback, object asyncState);
        
        bool EndPutTagValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueAndDateTime", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueAndDateTimeResponse")]
        bool PutTagValueAndDateTime(string strTagName, string strTagValue, string strDateTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueAndDateTime", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/PutTagValueAndDateTimeResponse")]
        System.IAsyncResult BeginPutTagValueAndDateTime(string strTagName, string strTagValue, string strDateTime, System.AsyncCallback callback, object asyncState);
        
        bool EndPutTagValueAndDateTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetDataCollectorList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetDataCollectorListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> GetDataCollectorList(string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetDataCollectorList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetDataCollectorListResponse")]
        System.IAsyncResult BeginGetDataCollectorList(string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> EndGetDataCollectorList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetUnitList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetUnitListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> GetUnitList(string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetUnitList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetUnitListResponse")]
        System.IAsyncResult BeginGetUnitList(string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> EndGetUnitList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagList(string strFilter, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagListResponse")]
        System.IAsyncResult BeginGetTagList(string strFilter, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagByPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageResponse")]
        System.IAsyncResult BeginGetTagByPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagByPage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageAndCountResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagByPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByPageAndCountResponse")]
        System.IAsyncResult BeginGetTagByPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagByPageAndCount(ref int iTotalCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageAndCountResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTempPageAndCount(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageAndCountResponse")]
        System.IAsyncResult BeginGetTagByTempPageAndCount(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTempPageAndCount(ref int iTotalCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageAndCountRespons" +
            "e")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageAndCountRespons" +
            "e")]
        System.IAsyncResult BeginGetTagByNoTempPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempPageAndCount(ref int iTotalCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempDevicePageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempDevicePageAndCountR" +
            "esponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempDevicePageAndCount(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempDevicePageAndCount", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempDevicePageAndCountR" +
            "esponse")]
        System.IAsyncResult BeginGetTagByNoTempDevicePageAndCount(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempDevicePageAndCount(ref int iTotalCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTempPage(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempPageResponse")]
        System.IAsyncResult BeginGetTagByTempPage(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTempPage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPage", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempPageResponse")]
        System.IAsyncResult BeginGetTagByNoTempPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempPage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTemp(string strFilter, string strTemplate, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByTempResponse")]
        System.IAsyncResult BeginGetTagByTemp(string strFilter, string strTemplate, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTemp(string strFilter, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagByNoTempResponse")]
        System.IAsyncResult BeginGetTagByNoTemp(string strFilter, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProperty", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyResponse")]
        HanaTechHisPlot.HanaTechWCFService.TagProperty GetTagProperty(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProperty", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyResponse")]
        System.IAsyncResult BeginGetTagProperty(string strTagName, System.AsyncCallback callback, object asyncState);
        
        HanaTechHisPlot.HanaTechWCFService.TagProperty EndGetTagProperty(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagPropertyList(System.Collections.Generic.List<string> strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagPropertyListResponse")]
        System.IAsyncResult BeginGetTagPropertyList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagPropertyList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchData", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataResponse")]
        HanaTechHisPlot.HanaTechWCFService.TagList FetchData(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchData", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataResponse")]
        System.IAsyncResult BeginFetchData(string strTagName, System.AsyncCallback callback, object asyncState);
        
        HanaTechHisPlot.HanaTechWCFService.TagList EndFetchData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> FetchDataByTagList(System.Collections.Generic.List<string> strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagListResponse")]
        System.IAsyncResult BeginFetchDataByTagList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndFetchDataByTagList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTagValueList(System.Collections.Generic.List<string> strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListResponse")]
        System.IAsyncResult BeginFetchDataByTagValueList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTagValueList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByValueListByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByValueListByCacheRespon" +
            "se")]
        string FetchDataByValueListByCache(System.Collections.Generic.List<string> strTagNameList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByValueListByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByValueListByCacheRespon" +
            "se")]
        System.IAsyncResult BeginFetchDataByValueListByCache(System.Collections.Generic.List<string> strTagNameList, System.AsyncCallback callback, object asyncState);
        
        string EndFetchDataByValueListByCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueByCacheRespons" +
            "e")]
        HanaTechHisPlot.HanaTechWCFService.TagValueList FetchDataByTagValueByCache(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueByCacheRespons" +
            "e")]
        System.IAsyncResult BeginFetchDataByTagValueByCache(string strTagName, System.AsyncCallback callback, object asyncState);
        
        HanaTechHisPlot.HanaTechWCFService.TagValueList EndFetchDataByTagValueByCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListByCacheRes" +
            "ponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTagValueListByCache(System.Collections.Generic.List<string> strTagNameList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListByCache", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagValueListByCacheRes" +
            "ponse")]
        System.IAsyncResult BeginFetchDataByTagValueListByCache(System.Collections.Generic.List<string> strTagNameList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTagValueListByCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagPropertyList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagPropertyListRespons" +
            "e")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> FetchDataByTagPropertyList(System.Collections.Generic.List<string> strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagPropertyList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTagPropertyListRespons" +
            "e")]
        System.IAsyncResult BeginFetchDataByTagPropertyList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndFetchDataByTagPropertyList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempResponse")]
        HanaTechHisPlot.HanaTechWCFService.TagProperty FetchDataByTemp(string strTagName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTemp", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempResponse")]
        System.IAsyncResult BeginFetchDataByTemp(string strTagName, System.AsyncCallback callback, object asyncState);
        
        HanaTechHisPlot.HanaTechWCFService.TagProperty EndFetchDataByTemp(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> FetchDataByTempList(System.Collections.Generic.List<string> tagList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTempListResponse")]
        System.IAsyncResult BeginFetchDataByTempList(System.Collections.Generic.List<string> tagList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndFetchDataByTempList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParam", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByQueryParam(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParam", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamResponse")]
        System.IAsyncResult BeginFetchDataByQueryParam(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByQueryParam(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamListResponse" +
            "")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByQueryParamList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByQueryParamListResponse" +
            "")]
        System.IAsyncResult BeginFetchDataByQueryParamList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByQueryParamList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTrend", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTrendResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTrend(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTrend", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByTrendResponse")]
        System.IAsyncResult BeginFetchDataByTrend(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTrend(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByHistory", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByHistoryResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByHistory", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByHistoryResponse")]
        System.IAsyncResult BeginFetchDataByHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByStringHistory", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByStringHistoryResponse")]
        string FetchDataByStringHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByStringHistory", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByStringHistoryResponse")]
        System.IAsyncResult BeginFetchDataByStringHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        string EndFetchDataByStringHistory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByAggregates", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByAggregatesResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByAggregates(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByAggregates", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/FetchDataByAggregatesResponse")]
        System.IAsyncResult BeginFetchDataByAggregates(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByAggregates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValue", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueResponse")]
        string GetTagFieldValue(string strTagName, string strFieldName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValue", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueResponse")]
        System.IAsyncResult BeginGetTagFieldValue(string strTagName, string strFieldName, System.AsyncCallback callback, object asyncState);
        
        string EndGetTagFieldValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueListResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> GetTagFieldValueList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagFieldValueListResponse")]
        System.IAsyncResult BeginGetTagFieldValueList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndGetTagFieldValueList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/CacheListTest", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/CacheListTestResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> CacheListTest();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/CacheListTest", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/CacheListTestResponse")]
        System.IAsyncResult BeginCacheListTest(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> EndCacheListTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetCosFileds", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetCosFiledsResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetCosFileds(string strCosName, string strFields, string strWhere, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetCosFileds", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetCosFiledsResponse")]
        System.IAsyncResult BeginGetCosFileds(string strCosName, string strFields, string strWhere, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetCosFileds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetInterfaceState", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetInterfaceStateResponse")]
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> GetInterfaceState(string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetInterfaceState", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetInterfaceStateResponse")]
        System.IAsyncResult BeginGetInterfaceState(string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> EndGetInterfaceState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetSingle", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetSingleResponse")]
        int GetSingle(string strSQL, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetSingle", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetSingleResponse")]
        System.IAsyncResult BeginGetSingle(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState);
        
        int EndGetSingle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetQuery", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetQueryResponse")]
        System.Data.DataSet GetQuery(string strSQL, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetQuery", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetQueryResponse")]
        System.IAsyncResult BeginGetQuery(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataSet EndGetQuery(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExecuteSql", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExecuteSqlResponse")]
        void ExecuteSql(string strSQL, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExecuteSql", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/ExecuteSqlResponse")]
        System.IAsyncResult BeginExecuteSql(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteSql(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddUnit", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddUnitResponse")]
        int AddUnit(string strUnitName, string strServerName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddUnit", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/AddUnitResponse")]
        System.IAsyncResult BeginAddUnit(string strUnitName, string strServerName, System.AsyncCallback callback, object asyncState);
        
        int EndAddUnit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetRTDBHostList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetRTDBHostListResponse")]
        System.Collections.Generic.List<string> GetRTDBHostList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetRTDBHostList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetRTDBHostListResponse")]
        System.IAsyncResult BeginGetRTDBHostList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetRTDBHostList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListResponse")]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> GetTagProcessDataList(HanaTechHisPlot.HanaTechWCFService.QueryParam qp);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataList", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListResponse")]
        System.IAsyncResult BeginGetTagProcessDataList(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> EndGetTagProcessDataList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListByMap", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListByMapRespons" +
            "e")]
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> GetTagProcessDataListByMap(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListByMap", ReplyAction="Http://www.hanatech.com.cn/WCFService/IWCFAspen/GetTagProcessDataListByMapRespons" +
            "e")]
        System.IAsyncResult BeginGetTagProcessDataListByMap(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> EndGetTagProcessDataListByMap(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFAspenChannel : HanaTechHisPlot.HanaTechWCFService.IWCFAspen, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExistsTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExistsTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PutTagValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PutTagValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PutTagValueAndDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PutTagValueAndDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCollectorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCollectorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnitListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnitListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByPageAndCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByPageAndCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int iTotalCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByTempPageAndCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByTempPageAndCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int iTotalCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByNoTempPageAndCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByNoTempPageAndCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int iTotalCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByNoTempDevicePageAndCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByNoTempDevicePageAndCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int iTotalCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByTempPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByTempPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByNoTempPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByNoTempPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByTempCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByTempCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagByNoTempCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagByNoTempCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagProperty Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HanaTechHisPlot.HanaTechWCFService.TagProperty)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagPropertyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagPropertyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HanaTechHisPlot.HanaTechWCFService.TagList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTagListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTagListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTagValueListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTagValueListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByValueListByCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByValueListByCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTagValueByCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTagValueByCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagValueList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HanaTechHisPlot.HanaTechWCFService.TagValueList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTagValueListByCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTagValueListByCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTagPropertyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTagPropertyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTempCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTempCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagProperty Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((HanaTechHisPlot.HanaTechWCFService.TagProperty)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTempListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTempListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByQueryParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByQueryParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByQueryParamListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByQueryParamListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByTrendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByTrendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByStringHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByStringHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchDataByAggregatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchDataByAggregatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagFieldValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagFieldValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagFieldValueListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagFieldValueListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CacheListTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CacheListTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCosFiledsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCosFiledsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInterfaceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInterfaceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRTDBHostListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRTDBHostListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagProcessDataListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagProcessDataListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTagProcessDataListByMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTagProcessDataListByMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFAspenClient : System.ServiceModel.ClientBase<HanaTechHisPlot.HanaTechWCFService.IWCFAspen>, HanaTechHisPlot.HanaTechWCFService.IWCFAspen {
        
        private BeginOperationDelegate onBeginExistsTagDelegate;
        
        private EndOperationDelegate onEndExistsTagDelegate;
        
        private System.Threading.SendOrPostCallback onExistsTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTagDelegate;
        
        private EndOperationDelegate onEndAddTagDelegate;
        
        private System.Threading.SendOrPostCallback onAddTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTagDelegate;
        
        private EndOperationDelegate onEndUpdateTagDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTagDelegate;
        
        private EndOperationDelegate onEndDeleteTagDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTagCompletedDelegate;
        
        private BeginOperationDelegate onBeginPutTagValueDelegate;
        
        private EndOperationDelegate onEndPutTagValueDelegate;
        
        private System.Threading.SendOrPostCallback onPutTagValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginPutTagValueAndDateTimeDelegate;
        
        private EndOperationDelegate onEndPutTagValueAndDateTimeDelegate;
        
        private System.Threading.SendOrPostCallback onPutTagValueAndDateTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataCollectorListDelegate;
        
        private EndOperationDelegate onEndGetDataCollectorListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCollectorListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnitListDelegate;
        
        private EndOperationDelegate onEndGetUnitListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnitListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagListDelegate;
        
        private EndOperationDelegate onEndGetTagListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByPageDelegate;
        
        private EndOperationDelegate onEndGetTagByPageDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByPageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByPageAndCountDelegate;
        
        private EndOperationDelegate onEndGetTagByPageAndCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByPageAndCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByTempPageAndCountDelegate;
        
        private EndOperationDelegate onEndGetTagByTempPageAndCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByTempPageAndCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByNoTempPageAndCountDelegate;
        
        private EndOperationDelegate onEndGetTagByNoTempPageAndCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByNoTempPageAndCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByNoTempDevicePageAndCountDelegate;
        
        private EndOperationDelegate onEndGetTagByNoTempDevicePageAndCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByNoTempDevicePageAndCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByTempPageDelegate;
        
        private EndOperationDelegate onEndGetTagByTempPageDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByTempPageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByNoTempPageDelegate;
        
        private EndOperationDelegate onEndGetTagByNoTempPageDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByNoTempPageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByTempDelegate;
        
        private EndOperationDelegate onEndGetTagByTempDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagByNoTempDelegate;
        
        private EndOperationDelegate onEndGetTagByNoTempDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagByNoTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagPropertyDelegate;
        
        private EndOperationDelegate onEndGetTagPropertyDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagPropertyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagPropertyListDelegate;
        
        private EndOperationDelegate onEndGetTagPropertyListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagPropertyListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataDelegate;
        
        private EndOperationDelegate onEndFetchDataDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTagListDelegate;
        
        private EndOperationDelegate onEndFetchDataByTagListDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTagListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTagValueListDelegate;
        
        private EndOperationDelegate onEndFetchDataByTagValueListDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTagValueListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByValueListByCacheDelegate;
        
        private EndOperationDelegate onEndFetchDataByValueListByCacheDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByValueListByCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTagValueByCacheDelegate;
        
        private EndOperationDelegate onEndFetchDataByTagValueByCacheDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTagValueByCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTagValueListByCacheDelegate;
        
        private EndOperationDelegate onEndFetchDataByTagValueListByCacheDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTagValueListByCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTagPropertyListDelegate;
        
        private EndOperationDelegate onEndFetchDataByTagPropertyListDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTagPropertyListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTempDelegate;
        
        private EndOperationDelegate onEndFetchDataByTempDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTempCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTempListDelegate;
        
        private EndOperationDelegate onEndFetchDataByTempListDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTempListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByQueryParamDelegate;
        
        private EndOperationDelegate onEndFetchDataByQueryParamDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByQueryParamCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByQueryParamListDelegate;
        
        private EndOperationDelegate onEndFetchDataByQueryParamListDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByQueryParamListCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByTrendDelegate;
        
        private EndOperationDelegate onEndFetchDataByTrendDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByTrendCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByHistoryDelegate;
        
        private EndOperationDelegate onEndFetchDataByHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByStringHistoryDelegate;
        
        private EndOperationDelegate onEndFetchDataByStringHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByStringHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchDataByAggregatesDelegate;
        
        private EndOperationDelegate onEndFetchDataByAggregatesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchDataByAggregatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagFieldValueDelegate;
        
        private EndOperationDelegate onEndGetTagFieldValueDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagFieldValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagFieldValueListDelegate;
        
        private EndOperationDelegate onEndGetTagFieldValueListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagFieldValueListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCacheListTestDelegate;
        
        private EndOperationDelegate onEndCacheListTestDelegate;
        
        private System.Threading.SendOrPostCallback onCacheListTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCosFiledsDelegate;
        
        private EndOperationDelegate onEndGetCosFiledsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCosFiledsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInterfaceStateDelegate;
        
        private EndOperationDelegate onEndGetInterfaceStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetInterfaceStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSingleDelegate;
        
        private EndOperationDelegate onEndGetSingleDelegate;
        
        private System.Threading.SendOrPostCallback onGetSingleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueryDelegate;
        
        private EndOperationDelegate onEndGetQueryDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlDelegate;
        
        private EndOperationDelegate onEndExecuteSqlDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUnitDelegate;
        
        private EndOperationDelegate onEndAddUnitDelegate;
        
        private System.Threading.SendOrPostCallback onAddUnitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRTDBHostListDelegate;
        
        private EndOperationDelegate onEndGetRTDBHostListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRTDBHostListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagProcessDataListDelegate;
        
        private EndOperationDelegate onEndGetTagProcessDataListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagProcessDataListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTagProcessDataListByMapDelegate;
        
        private EndOperationDelegate onEndGetTagProcessDataListByMapDelegate;
        
        private System.Threading.SendOrPostCallback onGetTagProcessDataListByMapCompletedDelegate;
        
        public WCFAspenClient() {
        }
        
        public WCFAspenClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFAspenClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFAspenClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFAspenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ExistsTagCompletedEventArgs> ExistsTagCompleted;
        
        public event System.EventHandler<AddTagCompletedEventArgs> AddTagCompleted;
        
        public event System.EventHandler<UpdateTagCompletedEventArgs> UpdateTagCompleted;
        
        public event System.EventHandler<DeleteTagCompletedEventArgs> DeleteTagCompleted;
        
        public event System.EventHandler<PutTagValueCompletedEventArgs> PutTagValueCompleted;
        
        public event System.EventHandler<PutTagValueAndDateTimeCompletedEventArgs> PutTagValueAndDateTimeCompleted;
        
        public event System.EventHandler<GetDataCollectorListCompletedEventArgs> GetDataCollectorListCompleted;
        
        public event System.EventHandler<GetUnitListCompletedEventArgs> GetUnitListCompleted;
        
        public event System.EventHandler<GetTagListCompletedEventArgs> GetTagListCompleted;
        
        public event System.EventHandler<GetTagByPageCompletedEventArgs> GetTagByPageCompleted;
        
        public event System.EventHandler<GetTagByPageAndCountCompletedEventArgs> GetTagByPageAndCountCompleted;
        
        public event System.EventHandler<GetTagByTempPageAndCountCompletedEventArgs> GetTagByTempPageAndCountCompleted;
        
        public event System.EventHandler<GetTagByNoTempPageAndCountCompletedEventArgs> GetTagByNoTempPageAndCountCompleted;
        
        public event System.EventHandler<GetTagByNoTempDevicePageAndCountCompletedEventArgs> GetTagByNoTempDevicePageAndCountCompleted;
        
        public event System.EventHandler<GetTagByTempPageCompletedEventArgs> GetTagByTempPageCompleted;
        
        public event System.EventHandler<GetTagByNoTempPageCompletedEventArgs> GetTagByNoTempPageCompleted;
        
        public event System.EventHandler<GetTagByTempCompletedEventArgs> GetTagByTempCompleted;
        
        public event System.EventHandler<GetTagByNoTempCompletedEventArgs> GetTagByNoTempCompleted;
        
        public event System.EventHandler<GetTagPropertyCompletedEventArgs> GetTagPropertyCompleted;
        
        public event System.EventHandler<GetTagPropertyListCompletedEventArgs> GetTagPropertyListCompleted;
        
        public event System.EventHandler<FetchDataCompletedEventArgs> FetchDataCompleted;
        
        public event System.EventHandler<FetchDataByTagListCompletedEventArgs> FetchDataByTagListCompleted;
        
        public event System.EventHandler<FetchDataByTagValueListCompletedEventArgs> FetchDataByTagValueListCompleted;
        
        public event System.EventHandler<FetchDataByValueListByCacheCompletedEventArgs> FetchDataByValueListByCacheCompleted;
        
        public event System.EventHandler<FetchDataByTagValueByCacheCompletedEventArgs> FetchDataByTagValueByCacheCompleted;
        
        public event System.EventHandler<FetchDataByTagValueListByCacheCompletedEventArgs> FetchDataByTagValueListByCacheCompleted;
        
        public event System.EventHandler<FetchDataByTagPropertyListCompletedEventArgs> FetchDataByTagPropertyListCompleted;
        
        public event System.EventHandler<FetchDataByTempCompletedEventArgs> FetchDataByTempCompleted;
        
        public event System.EventHandler<FetchDataByTempListCompletedEventArgs> FetchDataByTempListCompleted;
        
        public event System.EventHandler<FetchDataByQueryParamCompletedEventArgs> FetchDataByQueryParamCompleted;
        
        public event System.EventHandler<FetchDataByQueryParamListCompletedEventArgs> FetchDataByQueryParamListCompleted;
        
        public event System.EventHandler<FetchDataByTrendCompletedEventArgs> FetchDataByTrendCompleted;
        
        public event System.EventHandler<FetchDataByHistoryCompletedEventArgs> FetchDataByHistoryCompleted;
        
        public event System.EventHandler<FetchDataByStringHistoryCompletedEventArgs> FetchDataByStringHistoryCompleted;
        
        public event System.EventHandler<FetchDataByAggregatesCompletedEventArgs> FetchDataByAggregatesCompleted;
        
        public event System.EventHandler<GetTagFieldValueCompletedEventArgs> GetTagFieldValueCompleted;
        
        public event System.EventHandler<GetTagFieldValueListCompletedEventArgs> GetTagFieldValueListCompleted;
        
        public event System.EventHandler<CacheListTestCompletedEventArgs> CacheListTestCompleted;
        
        public event System.EventHandler<GetCosFiledsCompletedEventArgs> GetCosFiledsCompleted;
        
        public event System.EventHandler<GetInterfaceStateCompletedEventArgs> GetInterfaceStateCompleted;
        
        public event System.EventHandler<GetSingleCompletedEventArgs> GetSingleCompleted;
        
        public event System.EventHandler<GetQueryCompletedEventArgs> GetQueryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ExecuteSqlCompleted;
        
        public event System.EventHandler<AddUnitCompletedEventArgs> AddUnitCompleted;
        
        public event System.EventHandler<GetRTDBHostListCompletedEventArgs> GetRTDBHostListCompleted;
        
        public event System.EventHandler<GetTagProcessDataListCompletedEventArgs> GetTagProcessDataListCompleted;
        
        public event System.EventHandler<GetTagProcessDataListByMapCompletedEventArgs> GetTagProcessDataListByMapCompleted;
        
        public bool ExistsTag(string strTagName) {
            return base.Channel.ExistsTag(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExistsTag(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExistsTag(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExistsTag(System.IAsyncResult result) {
            return base.Channel.EndExistsTag(result);
        }
        
        private System.IAsyncResult OnBeginExistsTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginExistsTag(strTagName, callback, asyncState);
        }
        
        private object[] OnEndExistsTag(System.IAsyncResult result) {
            bool retVal = this.EndExistsTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExistsTagCompleted(object state) {
            if ((this.ExistsTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExistsTagCompleted(this, new ExistsTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExistsTagAsync(string strTagName) {
            this.ExistsTagAsync(strTagName, null);
        }
        
        public void ExistsTagAsync(string strTagName, object userState) {
            if ((this.onBeginExistsTagDelegate == null)) {
                this.onBeginExistsTagDelegate = new BeginOperationDelegate(this.OnBeginExistsTag);
            }
            if ((this.onEndExistsTagDelegate == null)) {
                this.onEndExistsTagDelegate = new EndOperationDelegate(this.OnEndExistsTag);
            }
            if ((this.onExistsTagCompletedDelegate == null)) {
                this.onExistsTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExistsTagCompleted);
            }
            base.InvokeAsync(this.onBeginExistsTagDelegate, new object[] {
                        strTagName}, this.onEndExistsTagDelegate, this.onExistsTagCompletedDelegate, userState);
        }
        
        public bool AddTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model) {
            return base.Channel.AddTag(model);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTag(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddTag(System.IAsyncResult result) {
            return base.Channel.EndAddTag(result);
        }
        
        private System.IAsyncResult OnBeginAddTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.TagProperty model = ((HanaTechHisPlot.HanaTechWCFService.TagProperty)(inValues[0]));
            return this.BeginAddTag(model, callback, asyncState);
        }
        
        private object[] OnEndAddTag(System.IAsyncResult result) {
            bool retVal = this.EndAddTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTagCompleted(object state) {
            if ((this.AddTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTagCompleted(this, new AddTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTagAsync(HanaTechHisPlot.HanaTechWCFService.TagProperty model) {
            this.AddTagAsync(model, null);
        }
        
        public void AddTagAsync(HanaTechHisPlot.HanaTechWCFService.TagProperty model, object userState) {
            if ((this.onBeginAddTagDelegate == null)) {
                this.onBeginAddTagDelegate = new BeginOperationDelegate(this.OnBeginAddTag);
            }
            if ((this.onEndAddTagDelegate == null)) {
                this.onEndAddTagDelegate = new EndOperationDelegate(this.OnEndAddTag);
            }
            if ((this.onAddTagCompletedDelegate == null)) {
                this.onAddTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTagCompleted);
            }
            base.InvokeAsync(this.onBeginAddTagDelegate, new object[] {
                        model}, this.onEndAddTagDelegate, this.onAddTagCompletedDelegate, userState);
        }
        
        public bool UpdateTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model) {
            return base.Channel.UpdateTag(model);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTag(HanaTechHisPlot.HanaTechWCFService.TagProperty model, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTag(model, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateTag(System.IAsyncResult result) {
            return base.Channel.EndUpdateTag(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.TagProperty model = ((HanaTechHisPlot.HanaTechWCFService.TagProperty)(inValues[0]));
            return this.BeginUpdateTag(model, callback, asyncState);
        }
        
        private object[] OnEndUpdateTag(System.IAsyncResult result) {
            bool retVal = this.EndUpdateTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTagCompleted(object state) {
            if ((this.UpdateTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTagCompleted(this, new UpdateTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTagAsync(HanaTechHisPlot.HanaTechWCFService.TagProperty model) {
            this.UpdateTagAsync(model, null);
        }
        
        public void UpdateTagAsync(HanaTechHisPlot.HanaTechWCFService.TagProperty model, object userState) {
            if ((this.onBeginUpdateTagDelegate == null)) {
                this.onBeginUpdateTagDelegate = new BeginOperationDelegate(this.OnBeginUpdateTag);
            }
            if ((this.onEndUpdateTagDelegate == null)) {
                this.onEndUpdateTagDelegate = new EndOperationDelegate(this.OnEndUpdateTag);
            }
            if ((this.onUpdateTagCompletedDelegate == null)) {
                this.onUpdateTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTagCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTagDelegate, new object[] {
                        model}, this.onEndUpdateTagDelegate, this.onUpdateTagCompletedDelegate, userState);
        }
        
        public bool DeleteTag(string strTagName) {
            return base.Channel.DeleteTag(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteTag(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTag(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteTag(System.IAsyncResult result) {
            return base.Channel.EndDeleteTag(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTag(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginDeleteTag(strTagName, callback, asyncState);
        }
        
        private object[] OnEndDeleteTag(System.IAsyncResult result) {
            bool retVal = this.EndDeleteTag(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTagCompleted(object state) {
            if ((this.DeleteTagCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTagCompleted(this, new DeleteTagCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTagAsync(string strTagName) {
            this.DeleteTagAsync(strTagName, null);
        }
        
        public void DeleteTagAsync(string strTagName, object userState) {
            if ((this.onBeginDeleteTagDelegate == null)) {
                this.onBeginDeleteTagDelegate = new BeginOperationDelegate(this.OnBeginDeleteTag);
            }
            if ((this.onEndDeleteTagDelegate == null)) {
                this.onEndDeleteTagDelegate = new EndOperationDelegate(this.OnEndDeleteTag);
            }
            if ((this.onDeleteTagCompletedDelegate == null)) {
                this.onDeleteTagCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTagCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTagDelegate, new object[] {
                        strTagName}, this.onEndDeleteTagDelegate, this.onDeleteTagCompletedDelegate, userState);
        }
        
        public bool PutTagValue(string strTagName, string strTagValue) {
            return base.Channel.PutTagValue(strTagName, strTagValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPutTagValue(string strTagName, string strTagValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPutTagValue(strTagName, strTagValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPutTagValue(System.IAsyncResult result) {
            return base.Channel.EndPutTagValue(result);
        }
        
        private System.IAsyncResult OnBeginPutTagValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            string strTagValue = ((string)(inValues[1]));
            return this.BeginPutTagValue(strTagName, strTagValue, callback, asyncState);
        }
        
        private object[] OnEndPutTagValue(System.IAsyncResult result) {
            bool retVal = this.EndPutTagValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPutTagValueCompleted(object state) {
            if ((this.PutTagValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PutTagValueCompleted(this, new PutTagValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PutTagValueAsync(string strTagName, string strTagValue) {
            this.PutTagValueAsync(strTagName, strTagValue, null);
        }
        
        public void PutTagValueAsync(string strTagName, string strTagValue, object userState) {
            if ((this.onBeginPutTagValueDelegate == null)) {
                this.onBeginPutTagValueDelegate = new BeginOperationDelegate(this.OnBeginPutTagValue);
            }
            if ((this.onEndPutTagValueDelegate == null)) {
                this.onEndPutTagValueDelegate = new EndOperationDelegate(this.OnEndPutTagValue);
            }
            if ((this.onPutTagValueCompletedDelegate == null)) {
                this.onPutTagValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPutTagValueCompleted);
            }
            base.InvokeAsync(this.onBeginPutTagValueDelegate, new object[] {
                        strTagName,
                        strTagValue}, this.onEndPutTagValueDelegate, this.onPutTagValueCompletedDelegate, userState);
        }
        
        public bool PutTagValueAndDateTime(string strTagName, string strTagValue, string strDateTime) {
            return base.Channel.PutTagValueAndDateTime(strTagName, strTagValue, strDateTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPutTagValueAndDateTime(string strTagName, string strTagValue, string strDateTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPutTagValueAndDateTime(strTagName, strTagValue, strDateTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPutTagValueAndDateTime(System.IAsyncResult result) {
            return base.Channel.EndPutTagValueAndDateTime(result);
        }
        
        private System.IAsyncResult OnBeginPutTagValueAndDateTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            string strTagValue = ((string)(inValues[1]));
            string strDateTime = ((string)(inValues[2]));
            return this.BeginPutTagValueAndDateTime(strTagName, strTagValue, strDateTime, callback, asyncState);
        }
        
        private object[] OnEndPutTagValueAndDateTime(System.IAsyncResult result) {
            bool retVal = this.EndPutTagValueAndDateTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPutTagValueAndDateTimeCompleted(object state) {
            if ((this.PutTagValueAndDateTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PutTagValueAndDateTimeCompleted(this, new PutTagValueAndDateTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PutTagValueAndDateTimeAsync(string strTagName, string strTagValue, string strDateTime) {
            this.PutTagValueAndDateTimeAsync(strTagName, strTagValue, strDateTime, null);
        }
        
        public void PutTagValueAndDateTimeAsync(string strTagName, string strTagValue, string strDateTime, object userState) {
            if ((this.onBeginPutTagValueAndDateTimeDelegate == null)) {
                this.onBeginPutTagValueAndDateTimeDelegate = new BeginOperationDelegate(this.OnBeginPutTagValueAndDateTime);
            }
            if ((this.onEndPutTagValueAndDateTimeDelegate == null)) {
                this.onEndPutTagValueAndDateTimeDelegate = new EndOperationDelegate(this.OnEndPutTagValueAndDateTime);
            }
            if ((this.onPutTagValueAndDateTimeCompletedDelegate == null)) {
                this.onPutTagValueAndDateTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPutTagValueAndDateTimeCompleted);
            }
            base.InvokeAsync(this.onBeginPutTagValueAndDateTimeDelegate, new object[] {
                        strTagName,
                        strTagValue,
                        strDateTime}, this.onEndPutTagValueAndDateTimeDelegate, this.onPutTagValueAndDateTimeCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> GetDataCollectorList(string strServerName) {
            return base.Channel.GetDataCollectorList(strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataCollectorList(string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataCollectorList(strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> EndGetDataCollectorList(System.IAsyncResult result) {
            return base.Channel.EndGetDataCollectorList(result);
        }
        
        private System.IAsyncResult OnBeginGetDataCollectorList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strServerName = ((string)(inValues[0]));
            return this.BeginGetDataCollectorList(strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetDataCollectorList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.DataCollector> retVal = this.EndGetDataCollectorList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCollectorListCompleted(object state) {
            if ((this.GetDataCollectorListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCollectorListCompleted(this, new GetDataCollectorListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataCollectorListAsync(string strServerName) {
            this.GetDataCollectorListAsync(strServerName, null);
        }
        
        public void GetDataCollectorListAsync(string strServerName, object userState) {
            if ((this.onBeginGetDataCollectorListDelegate == null)) {
                this.onBeginGetDataCollectorListDelegate = new BeginOperationDelegate(this.OnBeginGetDataCollectorList);
            }
            if ((this.onEndGetDataCollectorListDelegate == null)) {
                this.onEndGetDataCollectorListDelegate = new EndOperationDelegate(this.OnEndGetDataCollectorList);
            }
            if ((this.onGetDataCollectorListCompletedDelegate == null)) {
                this.onGetDataCollectorListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCollectorListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataCollectorListDelegate, new object[] {
                        strServerName}, this.onEndGetDataCollectorListDelegate, this.onGetDataCollectorListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> GetUnitList(string strServerName) {
            return base.Channel.GetUnitList(strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnitList(string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnitList(strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> EndGetUnitList(System.IAsyncResult result) {
            return base.Channel.EndGetUnitList(result);
        }
        
        private System.IAsyncResult OnBeginGetUnitList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strServerName = ((string)(inValues[0]));
            return this.BeginGetUnitList(strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetUnitList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagUnit> retVal = this.EndGetUnitList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnitListCompleted(object state) {
            if ((this.GetUnitListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnitListCompleted(this, new GetUnitListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnitListAsync(string strServerName) {
            this.GetUnitListAsync(strServerName, null);
        }
        
        public void GetUnitListAsync(string strServerName, object userState) {
            if ((this.onBeginGetUnitListDelegate == null)) {
                this.onBeginGetUnitListDelegate = new BeginOperationDelegate(this.OnBeginGetUnitList);
            }
            if ((this.onEndGetUnitListDelegate == null)) {
                this.onEndGetUnitListDelegate = new EndOperationDelegate(this.OnEndGetUnitList);
            }
            if ((this.onGetUnitListCompletedDelegate == null)) {
                this.onGetUnitListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnitListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnitListDelegate, new object[] {
                        strServerName}, this.onEndGetUnitListDelegate, this.onGetUnitListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagList(string strFilter, string strServerName) {
            return base.Channel.GetTagList(strFilter, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagList(string strFilter, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagList(strFilter, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagList(System.IAsyncResult result) {
            return base.Channel.EndGetTagList(result);
        }
        
        private System.IAsyncResult OnBeginGetTagList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginGetTagList(strFilter, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> retVal = this.EndGetTagList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagListCompleted(object state) {
            if ((this.GetTagListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagListCompleted(this, new GetTagListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagListAsync(string strFilter, string strServerName) {
            this.GetTagListAsync(strFilter, strServerName, null);
        }
        
        public void GetTagListAsync(string strFilter, string strServerName, object userState) {
            if ((this.onBeginGetTagListDelegate == null)) {
                this.onBeginGetTagListDelegate = new BeginOperationDelegate(this.OnBeginGetTagList);
            }
            if ((this.onEndGetTagListDelegate == null)) {
                this.onEndGetTagListDelegate = new EndOperationDelegate(this.OnEndGetTagList);
            }
            if ((this.onGetTagListCompletedDelegate == null)) {
                this.onGetTagListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagListDelegate, new object[] {
                        strFilter,
                        strServerName}, this.onEndGetTagListDelegate, this.onGetTagListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagByPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName) {
            return base.Channel.GetTagByPage(strFilter, strCurrentPageIndex, strPageSize, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByPage(strFilter, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagByPage(System.IAsyncResult result) {
            return base.Channel.EndGetTagByPage(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByPage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            int strCurrentPageIndex = ((int)(inValues[1]));
            int strPageSize = ((int)(inValues[2]));
            string strServerName = ((string)(inValues[3]));
            return this.BeginGetTagByPage(strFilter, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByPage(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> retVal = this.EndGetTagByPage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByPageCompleted(object state) {
            if ((this.GetTagByPageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByPageCompleted(this, new GetTagByPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByPageAsync(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName) {
            this.GetTagByPageAsync(strFilter, strCurrentPageIndex, strPageSize, strServerName, null);
        }
        
        public void GetTagByPageAsync(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, object userState) {
            if ((this.onBeginGetTagByPageDelegate == null)) {
                this.onBeginGetTagByPageDelegate = new BeginOperationDelegate(this.OnBeginGetTagByPage);
            }
            if ((this.onEndGetTagByPageDelegate == null)) {
                this.onEndGetTagByPageDelegate = new EndOperationDelegate(this.OnEndGetTagByPage);
            }
            if ((this.onGetTagByPageCompletedDelegate == null)) {
                this.onGetTagByPageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByPageCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByPageDelegate, new object[] {
                        strFilter,
                        strCurrentPageIndex,
                        strPageSize,
                        strServerName}, this.onEndGetTagByPageDelegate, this.onGetTagByPageCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetTagByPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName) {
            return base.Channel.GetTagByPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetTagByPageAndCount(ref int iTotalCount, System.IAsyncResult result) {
            return base.Channel.EndGetTagByPageAndCount(ref iTotalCount, result);
        }
        
        private System.IAsyncResult OnBeginGetTagByPageAndCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            int strCurrentPageIndex = ((int)(inValues[1]));
            int strPageSize = ((int)(inValues[2]));
            int iTotalCount = ((int)(inValues[3]));
            string strServerName = ((string)(inValues[4]));
            return this.BeginGetTagByPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByPageAndCount(System.IAsyncResult result) {
            int iTotalCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> retVal = this.EndGetTagByPageAndCount(ref iTotalCount, result);
            return new object[] {
                    iTotalCount,
                    retVal};
        }
        
        private void OnGetTagByPageAndCountCompleted(object state) {
            if ((this.GetTagByPageAndCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByPageAndCountCompleted(this, new GetTagByPageAndCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByPageAndCountAsync(string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName) {
            this.GetTagByPageAndCountAsync(strFilter, strCurrentPageIndex, strPageSize, iTotalCount, strServerName, null);
        }
        
        public void GetTagByPageAndCountAsync(string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName, object userState) {
            if ((this.onBeginGetTagByPageAndCountDelegate == null)) {
                this.onBeginGetTagByPageAndCountDelegate = new BeginOperationDelegate(this.OnBeginGetTagByPageAndCount);
            }
            if ((this.onEndGetTagByPageAndCountDelegate == null)) {
                this.onEndGetTagByPageAndCountDelegate = new EndOperationDelegate(this.OnEndGetTagByPageAndCount);
            }
            if ((this.onGetTagByPageAndCountCompletedDelegate == null)) {
                this.onGetTagByPageAndCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByPageAndCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByPageAndCountDelegate, new object[] {
                        strFilter,
                        strCurrentPageIndex,
                        strPageSize,
                        iTotalCount,
                        strServerName}, this.onEndGetTagByPageAndCountDelegate, this.onGetTagByPageAndCountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTempPageAndCount(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName) {
            return base.Channel.GetTagByTempPageAndCount(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByTempPageAndCount(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByTempPageAndCount(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTempPageAndCount(ref int iTotalCount, System.IAsyncResult result) {
            return base.Channel.EndGetTagByTempPageAndCount(ref iTotalCount, result);
        }
        
        private System.IAsyncResult OnBeginGetTagByTempPageAndCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strDevice = ((string)(inValues[0]));
            string strFilter = ((string)(inValues[1]));
            string strTemplate = ((string)(inValues[2]));
            int strCurrentPageIndex = ((int)(inValues[3]));
            int strPageSize = ((int)(inValues[4]));
            int iTotalCount = ((int)(inValues[5]));
            string strServerName = ((string)(inValues[6]));
            return this.BeginGetTagByTempPageAndCount(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByTempPageAndCount(System.IAsyncResult result) {
            int iTotalCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByTempPageAndCount(ref iTotalCount, result);
            return new object[] {
                    iTotalCount,
                    retVal};
        }
        
        private void OnGetTagByTempPageAndCountCompleted(object state) {
            if ((this.GetTagByTempPageAndCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByTempPageAndCountCompleted(this, new GetTagByTempPageAndCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByTempPageAndCountAsync(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName) {
            this.GetTagByTempPageAndCountAsync(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, iTotalCount, strServerName, null);
        }
        
        public void GetTagByTempPageAndCountAsync(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName, object userState) {
            if ((this.onBeginGetTagByTempPageAndCountDelegate == null)) {
                this.onBeginGetTagByTempPageAndCountDelegate = new BeginOperationDelegate(this.OnBeginGetTagByTempPageAndCount);
            }
            if ((this.onEndGetTagByTempPageAndCountDelegate == null)) {
                this.onEndGetTagByTempPageAndCountDelegate = new EndOperationDelegate(this.OnEndGetTagByTempPageAndCount);
            }
            if ((this.onGetTagByTempPageAndCountCompletedDelegate == null)) {
                this.onGetTagByTempPageAndCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByTempPageAndCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByTempPageAndCountDelegate, new object[] {
                        strDevice,
                        strFilter,
                        strTemplate,
                        strCurrentPageIndex,
                        strPageSize,
                        iTotalCount,
                        strServerName}, this.onEndGetTagByTempPageAndCountDelegate, this.onGetTagByTempPageAndCountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName) {
            return base.Channel.GetTagByNoTempPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByNoTempPageAndCount(string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByNoTempPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempPageAndCount(ref int iTotalCount, System.IAsyncResult result) {
            return base.Channel.EndGetTagByNoTempPageAndCount(ref iTotalCount, result);
        }
        
        private System.IAsyncResult OnBeginGetTagByNoTempPageAndCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            int strCurrentPageIndex = ((int)(inValues[1]));
            int strPageSize = ((int)(inValues[2]));
            int iTotalCount = ((int)(inValues[3]));
            string strServerName = ((string)(inValues[4]));
            return this.BeginGetTagByNoTempPageAndCount(strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByNoTempPageAndCount(System.IAsyncResult result) {
            int iTotalCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByNoTempPageAndCount(ref iTotalCount, result);
            return new object[] {
                    iTotalCount,
                    retVal};
        }
        
        private void OnGetTagByNoTempPageAndCountCompleted(object state) {
            if ((this.GetTagByNoTempPageAndCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByNoTempPageAndCountCompleted(this, new GetTagByNoTempPageAndCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByNoTempPageAndCountAsync(string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName) {
            this.GetTagByNoTempPageAndCountAsync(strFilter, strCurrentPageIndex, strPageSize, iTotalCount, strServerName, null);
        }
        
        public void GetTagByNoTempPageAndCountAsync(string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName, object userState) {
            if ((this.onBeginGetTagByNoTempPageAndCountDelegate == null)) {
                this.onBeginGetTagByNoTempPageAndCountDelegate = new BeginOperationDelegate(this.OnBeginGetTagByNoTempPageAndCount);
            }
            if ((this.onEndGetTagByNoTempPageAndCountDelegate == null)) {
                this.onEndGetTagByNoTempPageAndCountDelegate = new EndOperationDelegate(this.OnEndGetTagByNoTempPageAndCount);
            }
            if ((this.onGetTagByNoTempPageAndCountCompletedDelegate == null)) {
                this.onGetTagByNoTempPageAndCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByNoTempPageAndCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByNoTempPageAndCountDelegate, new object[] {
                        strFilter,
                        strCurrentPageIndex,
                        strPageSize,
                        iTotalCount,
                        strServerName}, this.onEndGetTagByNoTempPageAndCountDelegate, this.onGetTagByNoTempPageAndCountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempDevicePageAndCount(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName) {
            return base.Channel.GetTagByNoTempDevicePageAndCount(strDevice, strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByNoTempDevicePageAndCount(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, ref int iTotalCount, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByNoTempDevicePageAndCount(strDevice, strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempDevicePageAndCount(ref int iTotalCount, System.IAsyncResult result) {
            return base.Channel.EndGetTagByNoTempDevicePageAndCount(ref iTotalCount, result);
        }
        
        private System.IAsyncResult OnBeginGetTagByNoTempDevicePageAndCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strDevice = ((string)(inValues[0]));
            string strFilter = ((string)(inValues[1]));
            int strCurrentPageIndex = ((int)(inValues[2]));
            int strPageSize = ((int)(inValues[3]));
            int iTotalCount = ((int)(inValues[4]));
            string strServerName = ((string)(inValues[5]));
            return this.BeginGetTagByNoTempDevicePageAndCount(strDevice, strFilter, strCurrentPageIndex, strPageSize, ref iTotalCount, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByNoTempDevicePageAndCount(System.IAsyncResult result) {
            int iTotalCount = this.GetDefaultValueForInitialization<int>();
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByNoTempDevicePageAndCount(ref iTotalCount, result);
            return new object[] {
                    iTotalCount,
                    retVal};
        }
        
        private void OnGetTagByNoTempDevicePageAndCountCompleted(object state) {
            if ((this.GetTagByNoTempDevicePageAndCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByNoTempDevicePageAndCountCompleted(this, new GetTagByNoTempDevicePageAndCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByNoTempDevicePageAndCountAsync(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName) {
            this.GetTagByNoTempDevicePageAndCountAsync(strDevice, strFilter, strCurrentPageIndex, strPageSize, iTotalCount, strServerName, null);
        }
        
        public void GetTagByNoTempDevicePageAndCountAsync(string strDevice, string strFilter, int strCurrentPageIndex, int strPageSize, int iTotalCount, string strServerName, object userState) {
            if ((this.onBeginGetTagByNoTempDevicePageAndCountDelegate == null)) {
                this.onBeginGetTagByNoTempDevicePageAndCountDelegate = new BeginOperationDelegate(this.OnBeginGetTagByNoTempDevicePageAndCount);
            }
            if ((this.onEndGetTagByNoTempDevicePageAndCountDelegate == null)) {
                this.onEndGetTagByNoTempDevicePageAndCountDelegate = new EndOperationDelegate(this.OnEndGetTagByNoTempDevicePageAndCount);
            }
            if ((this.onGetTagByNoTempDevicePageAndCountCompletedDelegate == null)) {
                this.onGetTagByNoTempDevicePageAndCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByNoTempDevicePageAndCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByNoTempDevicePageAndCountDelegate, new object[] {
                        strDevice,
                        strFilter,
                        strCurrentPageIndex,
                        strPageSize,
                        iTotalCount,
                        strServerName}, this.onEndGetTagByNoTempDevicePageAndCountDelegate, this.onGetTagByNoTempDevicePageAndCountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTempPage(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName) {
            return base.Channel.GetTagByTempPage(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByTempPage(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByTempPage(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTempPage(System.IAsyncResult result) {
            return base.Channel.EndGetTagByTempPage(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByTempPage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strDevice = ((string)(inValues[0]));
            string strFilter = ((string)(inValues[1]));
            string strTemplate = ((string)(inValues[2]));
            int strCurrentPageIndex = ((int)(inValues[3]));
            int strPageSize = ((int)(inValues[4]));
            string strServerName = ((string)(inValues[5]));
            return this.BeginGetTagByTempPage(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByTempPage(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByTempPage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByTempPageCompleted(object state) {
            if ((this.GetTagByTempPageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByTempPageCompleted(this, new GetTagByTempPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByTempPageAsync(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName) {
            this.GetTagByTempPageAsync(strDevice, strFilter, strTemplate, strCurrentPageIndex, strPageSize, strServerName, null);
        }
        
        public void GetTagByTempPageAsync(string strDevice, string strFilter, string strTemplate, int strCurrentPageIndex, int strPageSize, string strServerName, object userState) {
            if ((this.onBeginGetTagByTempPageDelegate == null)) {
                this.onBeginGetTagByTempPageDelegate = new BeginOperationDelegate(this.OnBeginGetTagByTempPage);
            }
            if ((this.onEndGetTagByTempPageDelegate == null)) {
                this.onEndGetTagByTempPageDelegate = new EndOperationDelegate(this.OnEndGetTagByTempPage);
            }
            if ((this.onGetTagByTempPageCompletedDelegate == null)) {
                this.onGetTagByTempPageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByTempPageCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByTempPageDelegate, new object[] {
                        strDevice,
                        strFilter,
                        strTemplate,
                        strCurrentPageIndex,
                        strPageSize,
                        strServerName}, this.onEndGetTagByTempPageDelegate, this.onGetTagByTempPageCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTempPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName) {
            return base.Channel.GetTagByNoTempPage(strFilter, strCurrentPageIndex, strPageSize, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByNoTempPage(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByNoTempPage(strFilter, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTempPage(System.IAsyncResult result) {
            return base.Channel.EndGetTagByNoTempPage(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByNoTempPage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            int strCurrentPageIndex = ((int)(inValues[1]));
            int strPageSize = ((int)(inValues[2]));
            string strServerName = ((string)(inValues[3]));
            return this.BeginGetTagByNoTempPage(strFilter, strCurrentPageIndex, strPageSize, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByNoTempPage(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByNoTempPage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByNoTempPageCompleted(object state) {
            if ((this.GetTagByNoTempPageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByNoTempPageCompleted(this, new GetTagByNoTempPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByNoTempPageAsync(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName) {
            this.GetTagByNoTempPageAsync(strFilter, strCurrentPageIndex, strPageSize, strServerName, null);
        }
        
        public void GetTagByNoTempPageAsync(string strFilter, int strCurrentPageIndex, int strPageSize, string strServerName, object userState) {
            if ((this.onBeginGetTagByNoTempPageDelegate == null)) {
                this.onBeginGetTagByNoTempPageDelegate = new BeginOperationDelegate(this.OnBeginGetTagByNoTempPage);
            }
            if ((this.onEndGetTagByNoTempPageDelegate == null)) {
                this.onEndGetTagByNoTempPageDelegate = new EndOperationDelegate(this.OnEndGetTagByNoTempPage);
            }
            if ((this.onGetTagByNoTempPageCompletedDelegate == null)) {
                this.onGetTagByNoTempPageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByNoTempPageCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByNoTempPageDelegate, new object[] {
                        strFilter,
                        strCurrentPageIndex,
                        strPageSize,
                        strServerName}, this.onEndGetTagByNoTempPageDelegate, this.onGetTagByNoTempPageCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByTemp(string strFilter, string strTemplate, string strServerName) {
            return base.Channel.GetTagByTemp(strFilter, strTemplate, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByTemp(string strFilter, string strTemplate, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByTemp(strFilter, strTemplate, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByTemp(System.IAsyncResult result) {
            return base.Channel.EndGetTagByTemp(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            string strTemplate = ((string)(inValues[1]));
            string strServerName = ((string)(inValues[2]));
            return this.BeginGetTagByTemp(strFilter, strTemplate, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByTemp(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByTemp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByTempCompleted(object state) {
            if ((this.GetTagByTempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByTempCompleted(this, new GetTagByTempCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByTempAsync(string strFilter, string strTemplate, string strServerName) {
            this.GetTagByTempAsync(strFilter, strTemplate, strServerName, null);
        }
        
        public void GetTagByTempAsync(string strFilter, string strTemplate, string strServerName, object userState) {
            if ((this.onBeginGetTagByTempDelegate == null)) {
                this.onBeginGetTagByTempDelegate = new BeginOperationDelegate(this.OnBeginGetTagByTemp);
            }
            if ((this.onEndGetTagByTempDelegate == null)) {
                this.onEndGetTagByTempDelegate = new EndOperationDelegate(this.OnEndGetTagByTemp);
            }
            if ((this.onGetTagByTempCompletedDelegate == null)) {
                this.onGetTagByTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByTempCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByTempDelegate, new object[] {
                        strFilter,
                        strTemplate,
                        strServerName}, this.onEndGetTagByTempDelegate, this.onGetTagByTempCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagByNoTemp(string strFilter, string strServerName) {
            return base.Channel.GetTagByNoTemp(strFilter, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagByNoTemp(string strFilter, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagByNoTemp(strFilter, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagByNoTemp(System.IAsyncResult result) {
            return base.Channel.EndGetTagByNoTemp(result);
        }
        
        private System.IAsyncResult OnBeginGetTagByNoTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strFilter = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginGetTagByNoTemp(strFilter, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetTagByNoTemp(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagByNoTemp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagByNoTempCompleted(object state) {
            if ((this.GetTagByNoTempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagByNoTempCompleted(this, new GetTagByNoTempCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagByNoTempAsync(string strFilter, string strServerName) {
            this.GetTagByNoTempAsync(strFilter, strServerName, null);
        }
        
        public void GetTagByNoTempAsync(string strFilter, string strServerName, object userState) {
            if ((this.onBeginGetTagByNoTempDelegate == null)) {
                this.onBeginGetTagByNoTempDelegate = new BeginOperationDelegate(this.OnBeginGetTagByNoTemp);
            }
            if ((this.onEndGetTagByNoTempDelegate == null)) {
                this.onEndGetTagByNoTempDelegate = new EndOperationDelegate(this.OnEndGetTagByNoTemp);
            }
            if ((this.onGetTagByNoTempCompletedDelegate == null)) {
                this.onGetTagByNoTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagByNoTempCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagByNoTempDelegate, new object[] {
                        strFilter,
                        strServerName}, this.onEndGetTagByNoTempDelegate, this.onGetTagByNoTempCompletedDelegate, userState);
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagProperty GetTagProperty(string strTagName) {
            return base.Channel.GetTagProperty(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagProperty(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagProperty(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HanaTechHisPlot.HanaTechWCFService.TagProperty EndGetTagProperty(System.IAsyncResult result) {
            return base.Channel.EndGetTagProperty(result);
        }
        
        private System.IAsyncResult OnBeginGetTagProperty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginGetTagProperty(strTagName, callback, asyncState);
        }
        
        private object[] OnEndGetTagProperty(System.IAsyncResult result) {
            HanaTechHisPlot.HanaTechWCFService.TagProperty retVal = this.EndGetTagProperty(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagPropertyCompleted(object state) {
            if ((this.GetTagPropertyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagPropertyCompleted(this, new GetTagPropertyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagPropertyAsync(string strTagName) {
            this.GetTagPropertyAsync(strTagName, null);
        }
        
        public void GetTagPropertyAsync(string strTagName, object userState) {
            if ((this.onBeginGetTagPropertyDelegate == null)) {
                this.onBeginGetTagPropertyDelegate = new BeginOperationDelegate(this.OnBeginGetTagProperty);
            }
            if ((this.onEndGetTagPropertyDelegate == null)) {
                this.onEndGetTagPropertyDelegate = new EndOperationDelegate(this.OnEndGetTagProperty);
            }
            if ((this.onGetTagPropertyCompletedDelegate == null)) {
                this.onGetTagPropertyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagPropertyCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagPropertyDelegate, new object[] {
                        strTagName}, this.onEndGetTagPropertyDelegate, this.onGetTagPropertyCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> GetTagPropertyList(System.Collections.Generic.List<string> strTagName) {
            return base.Channel.GetTagPropertyList(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagPropertyList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagPropertyList(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndGetTagPropertyList(System.IAsyncResult result) {
            return base.Channel.EndGetTagPropertyList(result);
        }
        
        private System.IAsyncResult OnBeginGetTagPropertyList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagName = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginGetTagPropertyList(strTagName, callback, asyncState);
        }
        
        private object[] OnEndGetTagPropertyList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndGetTagPropertyList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagPropertyListCompleted(object state) {
            if ((this.GetTagPropertyListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagPropertyListCompleted(this, new GetTagPropertyListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagPropertyListAsync(System.Collections.Generic.List<string> strTagName) {
            this.GetTagPropertyListAsync(strTagName, null);
        }
        
        public void GetTagPropertyListAsync(System.Collections.Generic.List<string> strTagName, object userState) {
            if ((this.onBeginGetTagPropertyListDelegate == null)) {
                this.onBeginGetTagPropertyListDelegate = new BeginOperationDelegate(this.OnBeginGetTagPropertyList);
            }
            if ((this.onEndGetTagPropertyListDelegate == null)) {
                this.onEndGetTagPropertyListDelegate = new EndOperationDelegate(this.OnEndGetTagPropertyList);
            }
            if ((this.onGetTagPropertyListCompletedDelegate == null)) {
                this.onGetTagPropertyListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagPropertyListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagPropertyListDelegate, new object[] {
                        strTagName}, this.onEndGetTagPropertyListDelegate, this.onGetTagPropertyListCompletedDelegate, userState);
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagList FetchData(string strTagName) {
            return base.Channel.FetchData(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchData(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchData(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HanaTechHisPlot.HanaTechWCFService.TagList EndFetchData(System.IAsyncResult result) {
            return base.Channel.EndFetchData(result);
        }
        
        private System.IAsyncResult OnBeginFetchData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginFetchData(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchData(System.IAsyncResult result) {
            HanaTechHisPlot.HanaTechWCFService.TagList retVal = this.EndFetchData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataCompleted(object state) {
            if ((this.FetchDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataCompleted(this, new FetchDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataAsync(string strTagName) {
            this.FetchDataAsync(strTagName, null);
        }
        
        public void FetchDataAsync(string strTagName, object userState) {
            if ((this.onBeginFetchDataDelegate == null)) {
                this.onBeginFetchDataDelegate = new BeginOperationDelegate(this.OnBeginFetchData);
            }
            if ((this.onEndFetchDataDelegate == null)) {
                this.onEndFetchDataDelegate = new EndOperationDelegate(this.OnEndFetchData);
            }
            if ((this.onFetchDataCompletedDelegate == null)) {
                this.onFetchDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataDelegate, new object[] {
                        strTagName}, this.onEndFetchDataDelegate, this.onFetchDataCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> FetchDataByTagList(System.Collections.Generic.List<string> strTagName) {
            return base.Channel.FetchDataByTagList(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTagList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTagList(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndFetchDataByTagList(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTagList(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTagList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagName = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByTagList(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTagList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> retVal = this.EndFetchDataByTagList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTagListCompleted(object state) {
            if ((this.FetchDataByTagListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTagListCompleted(this, new FetchDataByTagListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTagListAsync(System.Collections.Generic.List<string> strTagName) {
            this.FetchDataByTagListAsync(strTagName, null);
        }
        
        public void FetchDataByTagListAsync(System.Collections.Generic.List<string> strTagName, object userState) {
            if ((this.onBeginFetchDataByTagListDelegate == null)) {
                this.onBeginFetchDataByTagListDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTagList);
            }
            if ((this.onEndFetchDataByTagListDelegate == null)) {
                this.onEndFetchDataByTagListDelegate = new EndOperationDelegate(this.OnEndFetchDataByTagList);
            }
            if ((this.onFetchDataByTagListCompletedDelegate == null)) {
                this.onFetchDataByTagListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTagListCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTagListDelegate, new object[] {
                        strTagName}, this.onEndFetchDataByTagListDelegate, this.onFetchDataByTagListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTagValueList(System.Collections.Generic.List<string> strTagName) {
            return base.Channel.FetchDataByTagValueList(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTagValueList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTagValueList(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTagValueList(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTagValueList(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTagValueList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagName = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByTagValueList(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTagValueList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByTagValueList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTagValueListCompleted(object state) {
            if ((this.FetchDataByTagValueListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTagValueListCompleted(this, new FetchDataByTagValueListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTagValueListAsync(System.Collections.Generic.List<string> strTagName) {
            this.FetchDataByTagValueListAsync(strTagName, null);
        }
        
        public void FetchDataByTagValueListAsync(System.Collections.Generic.List<string> strTagName, object userState) {
            if ((this.onBeginFetchDataByTagValueListDelegate == null)) {
                this.onBeginFetchDataByTagValueListDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTagValueList);
            }
            if ((this.onEndFetchDataByTagValueListDelegate == null)) {
                this.onEndFetchDataByTagValueListDelegate = new EndOperationDelegate(this.OnEndFetchDataByTagValueList);
            }
            if ((this.onFetchDataByTagValueListCompletedDelegate == null)) {
                this.onFetchDataByTagValueListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTagValueListCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTagValueListDelegate, new object[] {
                        strTagName}, this.onEndFetchDataByTagValueListDelegate, this.onFetchDataByTagValueListCompletedDelegate, userState);
        }
        
        public string FetchDataByValueListByCache(System.Collections.Generic.List<string> strTagNameList) {
            return base.Channel.FetchDataByValueListByCache(strTagNameList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByValueListByCache(System.Collections.Generic.List<string> strTagNameList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByValueListByCache(strTagNameList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndFetchDataByValueListByCache(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByValueListByCache(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByValueListByCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagNameList = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByValueListByCache(strTagNameList, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByValueListByCache(System.IAsyncResult result) {
            string retVal = this.EndFetchDataByValueListByCache(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByValueListByCacheCompleted(object state) {
            if ((this.FetchDataByValueListByCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByValueListByCacheCompleted(this, new FetchDataByValueListByCacheCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByValueListByCacheAsync(System.Collections.Generic.List<string> strTagNameList) {
            this.FetchDataByValueListByCacheAsync(strTagNameList, null);
        }
        
        public void FetchDataByValueListByCacheAsync(System.Collections.Generic.List<string> strTagNameList, object userState) {
            if ((this.onBeginFetchDataByValueListByCacheDelegate == null)) {
                this.onBeginFetchDataByValueListByCacheDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByValueListByCache);
            }
            if ((this.onEndFetchDataByValueListByCacheDelegate == null)) {
                this.onEndFetchDataByValueListByCacheDelegate = new EndOperationDelegate(this.OnEndFetchDataByValueListByCache);
            }
            if ((this.onFetchDataByValueListByCacheCompletedDelegate == null)) {
                this.onFetchDataByValueListByCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByValueListByCacheCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByValueListByCacheDelegate, new object[] {
                        strTagNameList}, this.onEndFetchDataByValueListByCacheDelegate, this.onFetchDataByValueListByCacheCompletedDelegate, userState);
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagValueList FetchDataByTagValueByCache(string strTagName) {
            return base.Channel.FetchDataByTagValueByCache(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTagValueByCache(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTagValueByCache(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HanaTechHisPlot.HanaTechWCFService.TagValueList EndFetchDataByTagValueByCache(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTagValueByCache(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTagValueByCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginFetchDataByTagValueByCache(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTagValueByCache(System.IAsyncResult result) {
            HanaTechHisPlot.HanaTechWCFService.TagValueList retVal = this.EndFetchDataByTagValueByCache(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTagValueByCacheCompleted(object state) {
            if ((this.FetchDataByTagValueByCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTagValueByCacheCompleted(this, new FetchDataByTagValueByCacheCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTagValueByCacheAsync(string strTagName) {
            this.FetchDataByTagValueByCacheAsync(strTagName, null);
        }
        
        public void FetchDataByTagValueByCacheAsync(string strTagName, object userState) {
            if ((this.onBeginFetchDataByTagValueByCacheDelegate == null)) {
                this.onBeginFetchDataByTagValueByCacheDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTagValueByCache);
            }
            if ((this.onEndFetchDataByTagValueByCacheDelegate == null)) {
                this.onEndFetchDataByTagValueByCacheDelegate = new EndOperationDelegate(this.OnEndFetchDataByTagValueByCache);
            }
            if ((this.onFetchDataByTagValueByCacheCompletedDelegate == null)) {
                this.onFetchDataByTagValueByCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTagValueByCacheCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTagValueByCacheDelegate, new object[] {
                        strTagName}, this.onEndFetchDataByTagValueByCacheDelegate, this.onFetchDataByTagValueByCacheCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTagValueListByCache(System.Collections.Generic.List<string> strTagNameList) {
            return base.Channel.FetchDataByTagValueListByCache(strTagNameList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTagValueListByCache(System.Collections.Generic.List<string> strTagNameList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTagValueListByCache(strTagNameList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTagValueListByCache(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTagValueListByCache(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTagValueListByCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagNameList = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByTagValueListByCache(strTagNameList, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTagValueListByCache(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByTagValueListByCache(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTagValueListByCacheCompleted(object state) {
            if ((this.FetchDataByTagValueListByCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTagValueListByCacheCompleted(this, new FetchDataByTagValueListByCacheCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTagValueListByCacheAsync(System.Collections.Generic.List<string> strTagNameList) {
            this.FetchDataByTagValueListByCacheAsync(strTagNameList, null);
        }
        
        public void FetchDataByTagValueListByCacheAsync(System.Collections.Generic.List<string> strTagNameList, object userState) {
            if ((this.onBeginFetchDataByTagValueListByCacheDelegate == null)) {
                this.onBeginFetchDataByTagValueListByCacheDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTagValueListByCache);
            }
            if ((this.onEndFetchDataByTagValueListByCacheDelegate == null)) {
                this.onEndFetchDataByTagValueListByCacheDelegate = new EndOperationDelegate(this.OnEndFetchDataByTagValueListByCache);
            }
            if ((this.onFetchDataByTagValueListByCacheCompletedDelegate == null)) {
                this.onFetchDataByTagValueListByCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTagValueListByCacheCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTagValueListByCacheDelegate, new object[] {
                        strTagNameList}, this.onEndFetchDataByTagValueListByCacheDelegate, this.onFetchDataByTagValueListByCacheCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> FetchDataByTagPropertyList(System.Collections.Generic.List<string> strTagName) {
            return base.Channel.FetchDataByTagPropertyList(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTagPropertyList(System.Collections.Generic.List<string> strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTagPropertyList(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndFetchDataByTagPropertyList(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTagPropertyList(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTagPropertyList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> strTagName = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByTagPropertyList(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTagPropertyList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndFetchDataByTagPropertyList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTagPropertyListCompleted(object state) {
            if ((this.FetchDataByTagPropertyListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTagPropertyListCompleted(this, new FetchDataByTagPropertyListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTagPropertyListAsync(System.Collections.Generic.List<string> strTagName) {
            this.FetchDataByTagPropertyListAsync(strTagName, null);
        }
        
        public void FetchDataByTagPropertyListAsync(System.Collections.Generic.List<string> strTagName, object userState) {
            if ((this.onBeginFetchDataByTagPropertyListDelegate == null)) {
                this.onBeginFetchDataByTagPropertyListDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTagPropertyList);
            }
            if ((this.onEndFetchDataByTagPropertyListDelegate == null)) {
                this.onEndFetchDataByTagPropertyListDelegate = new EndOperationDelegate(this.OnEndFetchDataByTagPropertyList);
            }
            if ((this.onFetchDataByTagPropertyListCompletedDelegate == null)) {
                this.onFetchDataByTagPropertyListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTagPropertyListCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTagPropertyListDelegate, new object[] {
                        strTagName}, this.onEndFetchDataByTagPropertyListDelegate, this.onFetchDataByTagPropertyListCompletedDelegate, userState);
        }
        
        public HanaTechHisPlot.HanaTechWCFService.TagProperty FetchDataByTemp(string strTagName) {
            return base.Channel.FetchDataByTemp(strTagName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTemp(string strTagName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTemp(strTagName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public HanaTechHisPlot.HanaTechWCFService.TagProperty EndFetchDataByTemp(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTemp(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTemp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            return this.BeginFetchDataByTemp(strTagName, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTemp(System.IAsyncResult result) {
            HanaTechHisPlot.HanaTechWCFService.TagProperty retVal = this.EndFetchDataByTemp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTempCompleted(object state) {
            if ((this.FetchDataByTempCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTempCompleted(this, new FetchDataByTempCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTempAsync(string strTagName) {
            this.FetchDataByTempAsync(strTagName, null);
        }
        
        public void FetchDataByTempAsync(string strTagName, object userState) {
            if ((this.onBeginFetchDataByTempDelegate == null)) {
                this.onBeginFetchDataByTempDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTemp);
            }
            if ((this.onEndFetchDataByTempDelegate == null)) {
                this.onEndFetchDataByTempDelegate = new EndOperationDelegate(this.OnEndFetchDataByTemp);
            }
            if ((this.onFetchDataByTempCompletedDelegate == null)) {
                this.onFetchDataByTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTempCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTempDelegate, new object[] {
                        strTagName}, this.onEndFetchDataByTempDelegate, this.onFetchDataByTempCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> FetchDataByTempList(System.Collections.Generic.List<string> tagList) {
            return base.Channel.FetchDataByTempList(tagList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTempList(System.Collections.Generic.List<string> tagList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTempList(tagList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> EndFetchDataByTempList(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTempList(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTempList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> tagList = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginFetchDataByTempList(tagList, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTempList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagProperty> retVal = this.EndFetchDataByTempList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTempListCompleted(object state) {
            if ((this.FetchDataByTempListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTempListCompleted(this, new FetchDataByTempListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTempListAsync(System.Collections.Generic.List<string> tagList) {
            this.FetchDataByTempListAsync(tagList, null);
        }
        
        public void FetchDataByTempListAsync(System.Collections.Generic.List<string> tagList, object userState) {
            if ((this.onBeginFetchDataByTempListDelegate == null)) {
                this.onBeginFetchDataByTempListDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTempList);
            }
            if ((this.onEndFetchDataByTempListDelegate == null)) {
                this.onEndFetchDataByTempListDelegate = new EndOperationDelegate(this.OnEndFetchDataByTempList);
            }
            if ((this.onFetchDataByTempListCompletedDelegate == null)) {
                this.onFetchDataByTempListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTempListCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTempListDelegate, new object[] {
                        tagList}, this.onEndFetchDataByTempListDelegate, this.onFetchDataByTempListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByQueryParam(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.FetchDataByQueryParam(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByQueryParam(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByQueryParam(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByQueryParam(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByQueryParam(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByQueryParam(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginFetchDataByQueryParam(qp, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByQueryParam(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByQueryParam(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByQueryParamCompleted(object state) {
            if ((this.FetchDataByQueryParamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByQueryParamCompleted(this, new FetchDataByQueryParamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByQueryParamAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.FetchDataByQueryParamAsync(qp, null);
        }
        
        public void FetchDataByQueryParamAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginFetchDataByQueryParamDelegate == null)) {
                this.onBeginFetchDataByQueryParamDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByQueryParam);
            }
            if ((this.onEndFetchDataByQueryParamDelegate == null)) {
                this.onEndFetchDataByQueryParamDelegate = new EndOperationDelegate(this.OnEndFetchDataByQueryParam);
            }
            if ((this.onFetchDataByQueryParamCompletedDelegate == null)) {
                this.onFetchDataByQueryParamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByQueryParamCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByQueryParamDelegate, new object[] {
                        qp}, this.onEndFetchDataByQueryParamDelegate, this.onFetchDataByQueryParamCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByQueryParamList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList) {
            return base.Channel.FetchDataByQueryParamList(qpList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByQueryParamList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByQueryParamList(qpList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByQueryParamList(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByQueryParamList(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByQueryParamList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList = ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam>)(inValues[0]));
            return this.BeginFetchDataByQueryParamList(qpList, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByQueryParamList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByQueryParamList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByQueryParamListCompleted(object state) {
            if ((this.FetchDataByQueryParamListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByQueryParamListCompleted(this, new FetchDataByQueryParamListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByQueryParamListAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList) {
            this.FetchDataByQueryParamListAsync(qpList, null);
        }
        
        public void FetchDataByQueryParamListAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, object userState) {
            if ((this.onBeginFetchDataByQueryParamListDelegate == null)) {
                this.onBeginFetchDataByQueryParamListDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByQueryParamList);
            }
            if ((this.onEndFetchDataByQueryParamListDelegate == null)) {
                this.onEndFetchDataByQueryParamListDelegate = new EndOperationDelegate(this.OnEndFetchDataByQueryParamList);
            }
            if ((this.onFetchDataByQueryParamListCompletedDelegate == null)) {
                this.onFetchDataByQueryParamListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByQueryParamListCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByQueryParamListDelegate, new object[] {
                        qpList}, this.onEndFetchDataByQueryParamListDelegate, this.onFetchDataByQueryParamListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByTrend(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.FetchDataByTrend(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByTrend(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByTrend(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByTrend(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByTrend(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByTrend(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginFetchDataByTrend(qp, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByTrend(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByTrend(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByTrendCompleted(object state) {
            if ((this.FetchDataByTrendCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByTrendCompleted(this, new FetchDataByTrendCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByTrendAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.FetchDataByTrendAsync(qp, null);
        }
        
        public void FetchDataByTrendAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginFetchDataByTrendDelegate == null)) {
                this.onBeginFetchDataByTrendDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByTrend);
            }
            if ((this.onEndFetchDataByTrendDelegate == null)) {
                this.onEndFetchDataByTrendDelegate = new EndOperationDelegate(this.OnEndFetchDataByTrend);
            }
            if ((this.onFetchDataByTrendCompletedDelegate == null)) {
                this.onFetchDataByTrendCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByTrendCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByTrendDelegate, new object[] {
                        qp}, this.onEndFetchDataByTrendDelegate, this.onFetchDataByTrendCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.FetchDataByHistory(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByHistory(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByHistory(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByHistory(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginFetchDataByHistory(qp, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByHistory(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByHistoryCompleted(object state) {
            if ((this.FetchDataByHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByHistoryCompleted(this, new FetchDataByHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByHistoryAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.FetchDataByHistoryAsync(qp, null);
        }
        
        public void FetchDataByHistoryAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginFetchDataByHistoryDelegate == null)) {
                this.onBeginFetchDataByHistoryDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByHistory);
            }
            if ((this.onEndFetchDataByHistoryDelegate == null)) {
                this.onEndFetchDataByHistoryDelegate = new EndOperationDelegate(this.OnEndFetchDataByHistory);
            }
            if ((this.onFetchDataByHistoryCompletedDelegate == null)) {
                this.onFetchDataByHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByHistoryDelegate, new object[] {
                        qp}, this.onEndFetchDataByHistoryDelegate, this.onFetchDataByHistoryCompletedDelegate, userState);
        }
        
        public string FetchDataByStringHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.FetchDataByStringHistory(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByStringHistory(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByStringHistory(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndFetchDataByStringHistory(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByStringHistory(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByStringHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginFetchDataByStringHistory(qp, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByStringHistory(System.IAsyncResult result) {
            string retVal = this.EndFetchDataByStringHistory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByStringHistoryCompleted(object state) {
            if ((this.FetchDataByStringHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByStringHistoryCompleted(this, new FetchDataByStringHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByStringHistoryAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.FetchDataByStringHistoryAsync(qp, null);
        }
        
        public void FetchDataByStringHistoryAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginFetchDataByStringHistoryDelegate == null)) {
                this.onBeginFetchDataByStringHistoryDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByStringHistory);
            }
            if ((this.onEndFetchDataByStringHistoryDelegate == null)) {
                this.onEndFetchDataByStringHistoryDelegate = new EndOperationDelegate(this.OnEndFetchDataByStringHistory);
            }
            if ((this.onFetchDataByStringHistoryCompletedDelegate == null)) {
                this.onFetchDataByStringHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByStringHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByStringHistoryDelegate, new object[] {
                        qp}, this.onEndFetchDataByStringHistoryDelegate, this.onFetchDataByStringHistoryCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> FetchDataByAggregates(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.FetchDataByAggregates(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFetchDataByAggregates(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchDataByAggregates(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndFetchDataByAggregates(System.IAsyncResult result) {
            return base.Channel.EndFetchDataByAggregates(result);
        }
        
        private System.IAsyncResult OnBeginFetchDataByAggregates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginFetchDataByAggregates(qp, callback, asyncState);
        }
        
        private object[] OnEndFetchDataByAggregates(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndFetchDataByAggregates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchDataByAggregatesCompleted(object state) {
            if ((this.FetchDataByAggregatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchDataByAggregatesCompleted(this, new FetchDataByAggregatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchDataByAggregatesAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.FetchDataByAggregatesAsync(qp, null);
        }
        
        public void FetchDataByAggregatesAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginFetchDataByAggregatesDelegate == null)) {
                this.onBeginFetchDataByAggregatesDelegate = new BeginOperationDelegate(this.OnBeginFetchDataByAggregates);
            }
            if ((this.onEndFetchDataByAggregatesDelegate == null)) {
                this.onEndFetchDataByAggregatesDelegate = new EndOperationDelegate(this.OnEndFetchDataByAggregates);
            }
            if ((this.onFetchDataByAggregatesCompletedDelegate == null)) {
                this.onFetchDataByAggregatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchDataByAggregatesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchDataByAggregatesDelegate, new object[] {
                        qp}, this.onEndFetchDataByAggregatesDelegate, this.onFetchDataByAggregatesCompletedDelegate, userState);
        }
        
        public string GetTagFieldValue(string strTagName, string strFieldName) {
            return base.Channel.GetTagFieldValue(strTagName, strFieldName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagFieldValue(string strTagName, string strFieldName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagFieldValue(strTagName, strFieldName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTagFieldValue(System.IAsyncResult result) {
            return base.Channel.EndGetTagFieldValue(result);
        }
        
        private System.IAsyncResult OnBeginGetTagFieldValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strTagName = ((string)(inValues[0]));
            string strFieldName = ((string)(inValues[1]));
            return this.BeginGetTagFieldValue(strTagName, strFieldName, callback, asyncState);
        }
        
        private object[] OnEndGetTagFieldValue(System.IAsyncResult result) {
            string retVal = this.EndGetTagFieldValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagFieldValueCompleted(object state) {
            if ((this.GetTagFieldValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagFieldValueCompleted(this, new GetTagFieldValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagFieldValueAsync(string strTagName, string strFieldName) {
            this.GetTagFieldValueAsync(strTagName, strFieldName, null);
        }
        
        public void GetTagFieldValueAsync(string strTagName, string strFieldName, object userState) {
            if ((this.onBeginGetTagFieldValueDelegate == null)) {
                this.onBeginGetTagFieldValueDelegate = new BeginOperationDelegate(this.OnBeginGetTagFieldValue);
            }
            if ((this.onEndGetTagFieldValueDelegate == null)) {
                this.onEndGetTagFieldValueDelegate = new EndOperationDelegate(this.OnEndGetTagFieldValue);
            }
            if ((this.onGetTagFieldValueCompletedDelegate == null)) {
                this.onGetTagFieldValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagFieldValueCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagFieldValueDelegate, new object[] {
                        strTagName,
                        strFieldName}, this.onEndGetTagFieldValueDelegate, this.onGetTagFieldValueCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> GetTagFieldValueList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list) {
            return base.Channel.GetTagFieldValueList(list);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagFieldValueList(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagFieldValueList(list, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> EndGetTagFieldValueList(System.IAsyncResult result) {
            return base.Channel.EndGetTagFieldValueList(result);
        }
        
        private System.IAsyncResult OnBeginGetTagFieldValueList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list = ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam>)(inValues[0]));
            return this.BeginGetTagFieldValueList(list, callback, asyncState);
        }
        
        private object[] OnEndGetTagFieldValueList(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList> retVal = this.EndGetTagFieldValueList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagFieldValueListCompleted(object state) {
            if ((this.GetTagFieldValueListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagFieldValueListCompleted(this, new GetTagFieldValueListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagFieldValueListAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list) {
            this.GetTagFieldValueListAsync(list, null);
        }
        
        public void GetTagFieldValueListAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> list, object userState) {
            if ((this.onBeginGetTagFieldValueListDelegate == null)) {
                this.onBeginGetTagFieldValueListDelegate = new BeginOperationDelegate(this.OnBeginGetTagFieldValueList);
            }
            if ((this.onEndGetTagFieldValueListDelegate == null)) {
                this.onEndGetTagFieldValueListDelegate = new EndOperationDelegate(this.OnEndGetTagFieldValueList);
            }
            if ((this.onGetTagFieldValueListCompletedDelegate == null)) {
                this.onGetTagFieldValueListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagFieldValueListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagFieldValueListDelegate, new object[] {
                        list}, this.onEndGetTagFieldValueListDelegate, this.onGetTagFieldValueListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> CacheListTest() {
            return base.Channel.CacheListTest();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCacheListTest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCacheListTest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> EndCacheListTest(System.IAsyncResult result) {
            return base.Channel.EndCacheListTest(result);
        }
        
        private System.IAsyncResult OnBeginCacheListTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCacheListTest(callback, asyncState);
        }
        
        private object[] OnEndCacheListTest(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagPropertyForCache> retVal = this.EndCacheListTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCacheListTestCompleted(object state) {
            if ((this.CacheListTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CacheListTestCompleted(this, new CacheListTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CacheListTestAsync() {
            this.CacheListTestAsync(null);
        }
        
        public void CacheListTestAsync(object userState) {
            if ((this.onBeginCacheListTestDelegate == null)) {
                this.onBeginCacheListTestDelegate = new BeginOperationDelegate(this.OnBeginCacheListTest);
            }
            if ((this.onEndCacheListTestDelegate == null)) {
                this.onEndCacheListTestDelegate = new EndOperationDelegate(this.OnEndCacheListTest);
            }
            if ((this.onCacheListTestCompletedDelegate == null)) {
                this.onCacheListTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCacheListTestCompleted);
            }
            base.InvokeAsync(this.onBeginCacheListTestDelegate, null, this.onEndCacheListTestDelegate, this.onCacheListTestCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> GetCosFileds(string strCosName, string strFields, string strWhere, string strServerName) {
            return base.Channel.GetCosFileds(strCosName, strFields, strWhere, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCosFileds(string strCosName, string strFields, string strWhere, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCosFileds(strCosName, strFields, strWhere, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> EndGetCosFileds(System.IAsyncResult result) {
            return base.Channel.EndGetCosFileds(result);
        }
        
        private System.IAsyncResult OnBeginGetCosFileds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strCosName = ((string)(inValues[0]));
            string strFields = ((string)(inValues[1]));
            string strWhere = ((string)(inValues[2]));
            string strServerName = ((string)(inValues[3]));
            return this.BeginGetCosFileds(strCosName, strFields, strWhere, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetCosFileds(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagList> retVal = this.EndGetCosFileds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCosFiledsCompleted(object state) {
            if ((this.GetCosFiledsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCosFiledsCompleted(this, new GetCosFiledsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCosFiledsAsync(string strCosName, string strFields, string strWhere, string strServerName) {
            this.GetCosFiledsAsync(strCosName, strFields, strWhere, strServerName, null);
        }
        
        public void GetCosFiledsAsync(string strCosName, string strFields, string strWhere, string strServerName, object userState) {
            if ((this.onBeginGetCosFiledsDelegate == null)) {
                this.onBeginGetCosFiledsDelegate = new BeginOperationDelegate(this.OnBeginGetCosFileds);
            }
            if ((this.onEndGetCosFiledsDelegate == null)) {
                this.onEndGetCosFiledsDelegate = new EndOperationDelegate(this.OnEndGetCosFileds);
            }
            if ((this.onGetCosFiledsCompletedDelegate == null)) {
                this.onGetCosFiledsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCosFiledsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCosFiledsDelegate, new object[] {
                        strCosName,
                        strFields,
                        strWhere,
                        strServerName}, this.onEndGetCosFiledsDelegate, this.onGetCosFiledsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> GetInterfaceState(string strServerName) {
            return base.Channel.GetInterfaceState(strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInterfaceState(string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInterfaceState(strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> EndGetInterfaceState(System.IAsyncResult result) {
            return base.Channel.EndGetInterfaceState(result);
        }
        
        private System.IAsyncResult OnBeginGetInterfaceState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strServerName = ((string)(inValues[0]));
            return this.BeginGetInterfaceState(strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetInterfaceState(System.IAsyncResult result) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.AsepnInterface> retVal = this.EndGetInterfaceState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInterfaceStateCompleted(object state) {
            if ((this.GetInterfaceStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInterfaceStateCompleted(this, new GetInterfaceStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInterfaceStateAsync(string strServerName) {
            this.GetInterfaceStateAsync(strServerName, null);
        }
        
        public void GetInterfaceStateAsync(string strServerName, object userState) {
            if ((this.onBeginGetInterfaceStateDelegate == null)) {
                this.onBeginGetInterfaceStateDelegate = new BeginOperationDelegate(this.OnBeginGetInterfaceState);
            }
            if ((this.onEndGetInterfaceStateDelegate == null)) {
                this.onEndGetInterfaceStateDelegate = new EndOperationDelegate(this.OnEndGetInterfaceState);
            }
            if ((this.onGetInterfaceStateCompletedDelegate == null)) {
                this.onGetInterfaceStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInterfaceStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetInterfaceStateDelegate, new object[] {
                        strServerName}, this.onEndGetInterfaceStateDelegate, this.onGetInterfaceStateCompletedDelegate, userState);
        }
        
        public int GetSingle(string strSQL, string strServerName) {
            return base.Channel.GetSingle(strSQL, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSingle(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSingle(strSQL, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetSingle(System.IAsyncResult result) {
            return base.Channel.EndGetSingle(result);
        }
        
        private System.IAsyncResult OnBeginGetSingle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSQL = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginGetSingle(strSQL, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetSingle(System.IAsyncResult result) {
            int retVal = this.EndGetSingle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSingleCompleted(object state) {
            if ((this.GetSingleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSingleCompleted(this, new GetSingleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSingleAsync(string strSQL, string strServerName) {
            this.GetSingleAsync(strSQL, strServerName, null);
        }
        
        public void GetSingleAsync(string strSQL, string strServerName, object userState) {
            if ((this.onBeginGetSingleDelegate == null)) {
                this.onBeginGetSingleDelegate = new BeginOperationDelegate(this.OnBeginGetSingle);
            }
            if ((this.onEndGetSingleDelegate == null)) {
                this.onEndGetSingleDelegate = new EndOperationDelegate(this.OnEndGetSingle);
            }
            if ((this.onGetSingleCompletedDelegate == null)) {
                this.onGetSingleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSingleCompleted);
            }
            base.InvokeAsync(this.onBeginGetSingleDelegate, new object[] {
                        strSQL,
                        strServerName}, this.onEndGetSingleDelegate, this.onGetSingleCompletedDelegate, userState);
        }
        
        public System.Data.DataSet GetQuery(string strSQL, string strServerName) {
            return base.Channel.GetQuery(strSQL, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQuery(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuery(strSQL, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataSet EndGetQuery(System.IAsyncResult result) {
            return base.Channel.EndGetQuery(result);
        }
        
        private System.IAsyncResult OnBeginGetQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSQL = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginGetQuery(strSQL, strServerName, callback, asyncState);
        }
        
        private object[] OnEndGetQuery(System.IAsyncResult result) {
            System.Data.DataSet retVal = this.EndGetQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueryCompleted(object state) {
            if ((this.GetQueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueryCompleted(this, new GetQueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueryAsync(string strSQL, string strServerName) {
            this.GetQueryAsync(strSQL, strServerName, null);
        }
        
        public void GetQueryAsync(string strSQL, string strServerName, object userState) {
            if ((this.onBeginGetQueryDelegate == null)) {
                this.onBeginGetQueryDelegate = new BeginOperationDelegate(this.OnBeginGetQuery);
            }
            if ((this.onEndGetQueryDelegate == null)) {
                this.onEndGetQueryDelegate = new EndOperationDelegate(this.OnEndGetQuery);
            }
            if ((this.onGetQueryCompletedDelegate == null)) {
                this.onGetQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueryCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueryDelegate, new object[] {
                        strSQL,
                        strServerName}, this.onEndGetQueryDelegate, this.onGetQueryCompletedDelegate, userState);
        }
        
        public void ExecuteSql(string strSQL, string strServerName) {
            base.Channel.ExecuteSql(strSQL, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSql(string strSQL, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSql(strSQL, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndExecuteSql(System.IAsyncResult result) {
            base.Channel.EndExecuteSql(result);
        }
        
        private System.IAsyncResult OnBeginExecuteSql(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strSQL = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginExecuteSql(strSQL, strServerName, callback, asyncState);
        }
        
        private object[] OnEndExecuteSql(System.IAsyncResult result) {
            this.EndExecuteSql(result);
            return null;
        }
        
        private void OnExecuteSqlCompleted(object state) {
            if ((this.ExecuteSqlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlAsync(string strSQL, string strServerName) {
            this.ExecuteSqlAsync(strSQL, strServerName, null);
        }
        
        public void ExecuteSqlAsync(string strSQL, string strServerName, object userState) {
            if ((this.onBeginExecuteSqlDelegate == null)) {
                this.onBeginExecuteSqlDelegate = new BeginOperationDelegate(this.OnBeginExecuteSql);
            }
            if ((this.onEndExecuteSqlDelegate == null)) {
                this.onEndExecuteSqlDelegate = new EndOperationDelegate(this.OnEndExecuteSql);
            }
            if ((this.onExecuteSqlCompletedDelegate == null)) {
                this.onExecuteSqlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSqlDelegate, new object[] {
                        strSQL,
                        strServerName}, this.onEndExecuteSqlDelegate, this.onExecuteSqlCompletedDelegate, userState);
        }
        
        public int AddUnit(string strUnitName, string strServerName) {
            return base.Channel.AddUnit(strUnitName, strServerName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUnit(string strUnitName, string strServerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUnit(strUnitName, strServerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndAddUnit(System.IAsyncResult result) {
            return base.Channel.EndAddUnit(result);
        }
        
        private System.IAsyncResult OnBeginAddUnit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strUnitName = ((string)(inValues[0]));
            string strServerName = ((string)(inValues[1]));
            return this.BeginAddUnit(strUnitName, strServerName, callback, asyncState);
        }
        
        private object[] OnEndAddUnit(System.IAsyncResult result) {
            int retVal = this.EndAddUnit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUnitCompleted(object state) {
            if ((this.AddUnitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUnitCompleted(this, new AddUnitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUnitAsync(string strUnitName, string strServerName) {
            this.AddUnitAsync(strUnitName, strServerName, null);
        }
        
        public void AddUnitAsync(string strUnitName, string strServerName, object userState) {
            if ((this.onBeginAddUnitDelegate == null)) {
                this.onBeginAddUnitDelegate = new BeginOperationDelegate(this.OnBeginAddUnit);
            }
            if ((this.onEndAddUnitDelegate == null)) {
                this.onEndAddUnitDelegate = new EndOperationDelegate(this.OnEndAddUnit);
            }
            if ((this.onAddUnitCompletedDelegate == null)) {
                this.onAddUnitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUnitCompleted);
            }
            base.InvokeAsync(this.onBeginAddUnitDelegate, new object[] {
                        strUnitName,
                        strServerName}, this.onEndAddUnitDelegate, this.onAddUnitCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetRTDBHostList() {
            return base.Channel.GetRTDBHostList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRTDBHostList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRTDBHostList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetRTDBHostList(System.IAsyncResult result) {
            return base.Channel.EndGetRTDBHostList(result);
        }
        
        private System.IAsyncResult OnBeginGetRTDBHostList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRTDBHostList(callback, asyncState);
        }
        
        private object[] OnEndGetRTDBHostList(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetRTDBHostList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRTDBHostListCompleted(object state) {
            if ((this.GetRTDBHostListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRTDBHostListCompleted(this, new GetRTDBHostListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRTDBHostListAsync() {
            this.GetRTDBHostListAsync(null);
        }
        
        public void GetRTDBHostListAsync(object userState) {
            if ((this.onBeginGetRTDBHostListDelegate == null)) {
                this.onBeginGetRTDBHostListDelegate = new BeginOperationDelegate(this.OnBeginGetRTDBHostList);
            }
            if ((this.onEndGetRTDBHostListDelegate == null)) {
                this.onEndGetRTDBHostListDelegate = new EndOperationDelegate(this.OnEndGetRTDBHostList);
            }
            if ((this.onGetRTDBHostListCompletedDelegate == null)) {
                this.onGetRTDBHostListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRTDBHostListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRTDBHostListDelegate, null, this.onEndGetRTDBHostListDelegate, this.onGetRTDBHostListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> GetTagProcessDataList(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            return base.Channel.GetTagProcessDataList(qp);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagProcessDataList(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagProcessDataList(qp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> EndGetTagProcessDataList(System.IAsyncResult result) {
            return base.Channel.EndGetTagProcessDataList(result);
        }
        
        private System.IAsyncResult OnBeginGetTagProcessDataList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HanaTechHisPlot.HanaTechWCFService.QueryParam qp = ((HanaTechHisPlot.HanaTechWCFService.QueryParam)(inValues[0]));
            return this.BeginGetTagProcessDataList(qp, callback, asyncState);
        }
        
        private object[] OnEndGetTagProcessDataList(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> retVal = this.EndGetTagProcessDataList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagProcessDataListCompleted(object state) {
            if ((this.GetTagProcessDataListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagProcessDataListCompleted(this, new GetTagProcessDataListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagProcessDataListAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp) {
            this.GetTagProcessDataListAsync(qp, null);
        }
        
        public void GetTagProcessDataListAsync(HanaTechHisPlot.HanaTechWCFService.QueryParam qp, object userState) {
            if ((this.onBeginGetTagProcessDataListDelegate == null)) {
                this.onBeginGetTagProcessDataListDelegate = new BeginOperationDelegate(this.OnBeginGetTagProcessDataList);
            }
            if ((this.onEndGetTagProcessDataListDelegate == null)) {
                this.onEndGetTagProcessDataListDelegate = new EndOperationDelegate(this.OnEndGetTagProcessDataList);
            }
            if ((this.onGetTagProcessDataListCompletedDelegate == null)) {
                this.onGetTagProcessDataListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagProcessDataListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagProcessDataListDelegate, new object[] {
                        qp}, this.onEndGetTagProcessDataListDelegate, this.onGetTagProcessDataListCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> GetTagProcessDataListByMap(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList) {
            return base.Channel.GetTagProcessDataListByMap(qpList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTagProcessDataListByMap(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTagProcessDataListByMap(qpList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> EndGetTagProcessDataListByMap(System.IAsyncResult result) {
            return base.Channel.EndGetTagProcessDataListByMap(result);
        }
        
        private System.IAsyncResult OnBeginGetTagProcessDataListByMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList = ((System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam>)(inValues[0]));
            return this.BeginGetTagProcessDataListByMap(qpList, callback, asyncState);
        }
        
        private object[] OnEndGetTagProcessDataListByMap(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.TagValueList>> retVal = this.EndGetTagProcessDataListByMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTagProcessDataListByMapCompleted(object state) {
            if ((this.GetTagProcessDataListByMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTagProcessDataListByMapCompleted(this, new GetTagProcessDataListByMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTagProcessDataListByMapAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList) {
            this.GetTagProcessDataListByMapAsync(qpList, null);
        }
        
        public void GetTagProcessDataListByMapAsync(System.Collections.Generic.List<HanaTechHisPlot.HanaTechWCFService.QueryParam> qpList, object userState) {
            if ((this.onBeginGetTagProcessDataListByMapDelegate == null)) {
                this.onBeginGetTagProcessDataListByMapDelegate = new BeginOperationDelegate(this.OnBeginGetTagProcessDataListByMap);
            }
            if ((this.onEndGetTagProcessDataListByMapDelegate == null)) {
                this.onEndGetTagProcessDataListByMapDelegate = new EndOperationDelegate(this.OnEndGetTagProcessDataListByMap);
            }
            if ((this.onGetTagProcessDataListByMapCompletedDelegate == null)) {
                this.onGetTagProcessDataListByMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTagProcessDataListByMapCompleted);
            }
            base.InvokeAsync(this.onBeginGetTagProcessDataListByMapDelegate, new object[] {
                        qpList}, this.onEndGetTagProcessDataListByMapDelegate, this.onGetTagProcessDataListByMapCompletedDelegate, userState);
        }
    }
}
